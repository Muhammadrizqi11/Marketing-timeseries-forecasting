{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20705,"status":"ok","timestamp":1685485775317,"user":{"displayName":"Muhammad Rizqi","userId":"14583344627405984509"},"user_tz":-420},"id":"tT76tJM4aCPr","outputId":"a2ff7c1d-b04a-44a4-f38d-86365e41bba9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xKCighCOaW87"},"outputs":[],"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from datetime import datetime\n","from matplotlib.gridspec import GridSpec\n","%matplotlib inline\n","\n","from statsmodels.tsa.arima_model import ARIMA\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","from pandas.plotting import autocorrelation_plot\n","from statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\n","import statsmodels.formula.api as smf\n","import statsmodels.tsa.api as smt\n","import statsmodels.api as sm\n","import scipy.stats as scs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Jo38rADaaYr"},"outputs":[],"source":["df=pd.read_csv('')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1684479098690,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"IyqoKd8wb_zP","outputId":"0377e4a8-2472-4393-a145-f3deafd654e7"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-9449a7fd-f353-4212-bbf7-4adc0edde1f3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9449a7fd-f353-4212-bbf7-4adc0edde1f3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9449a7fd-f353-4212-bbf7-4adc0edde1f3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9449a7fd-f353-4212-bbf7-4adc0edde1f3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   id        date  store_nbr      family  sales  onpromotion\n","0   0  2013-01-01          1  AUTOMOTIVE    0.0            0\n","1   1  2013-01-01          1   BABY CARE    0.0            0\n","2   2  2013-01-01          1      BEAUTY    0.0            0\n","3   3  2013-01-01          1   BEVERAGES    0.0            0\n","4   4  2013-01-01          1       BOOKS    0.0            0"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":449,"status":"ok","timestamp":1684379765934,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"b3AjHXhbbVeX","outputId":"125e9229-1867-44f5-cb91-56c85194fd7b"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3000888 entries, 0 to 3000887\n","Data columns (total 6 columns):\n"," #   Column       Dtype  \n","---  ------       -----  \n"," 0   id           int64  \n"," 1   date         object \n"," 2   store_nbr    int64  \n"," 3   family       object \n"," 4   sales        float64\n"," 5   onpromotion  int64  \n","dtypes: float64(1), int64(3), object(2)\n","memory usage: 137.4+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":363,"status":"ok","timestamp":1685281315919,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"U4Abiym5drdq","outputId":"20b18f1e-9b86-4498-97dc-f1e13877198c"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3000888 entries, 0 to 3000887\n","Data columns (total 6 columns):\n"," #   Column       Dtype         \n","---  ------       -----         \n"," 0   id           int64         \n"," 1   date         datetime64[ns]\n"," 2   store_nbr    int64         \n"," 3   family       object        \n"," 4   sales        float64       \n"," 5   onpromotion  int64         \n","dtypes: datetime64[ns](1), float64(1), int64(3), object(1)\n","memory usage: 137.4+ MB\n"]}],"source":["df['date'] = pd.to_datetime(df.date)\n","df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1684313748389,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"oyVZynpEfHT4","outputId":"4cff2ff0-7e00-400a-fdf1-ba8fab079792"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-da7d4b83-b231-4509-a455-3954c1fcfef0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3000883</th>\n","      <td>3000883</td>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>POULTRY</td>\n","      <td>438.133</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3000884</th>\n","      <td>3000884</td>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PREPARED FOODS</td>\n","      <td>154.553</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3000885</th>\n","      <td>3000885</td>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PRODUCE</td>\n","      <td>2419.729</td>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>3000886</th>\n","      <td>3000886</td>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SCHOOL AND OFFICE SUPPLIES</td>\n","      <td>121.000</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>3000887</td>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SEAFOOD</td>\n","      <td>16.000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da7d4b83-b231-4509-a455-3954c1fcfef0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-da7d4b83-b231-4509-a455-3954c1fcfef0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-da7d4b83-b231-4509-a455-3954c1fcfef0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["              id       date  store_nbr                      family     sales  \\\n","3000883  3000883 2017-08-15          9                     POULTRY   438.133   \n","3000884  3000884 2017-08-15          9              PREPARED FOODS   154.553   \n","3000885  3000885 2017-08-15          9                     PRODUCE  2419.729   \n","3000886  3000886 2017-08-15          9  SCHOOL AND OFFICE SUPPLIES   121.000   \n","3000887  3000887 2017-08-15          9                     SEAFOOD    16.000   \n","\n","         onpromotion  \n","3000883            0  \n","3000884            1  \n","3000885          148  \n","3000886            8  \n","3000887            0  "]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["df.tail()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LYRXPZIP90Cs"},"outputs":[],"source":["start_date = '2013-01-01'\n","end_date = '2017-08-15'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":4317,"status":"ok","timestamp":1684401734465,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"P1M1bsgqgYX0","outputId":"3ccbeb28-ca5c-4a46-fe3e-8739b3dcee7d"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-7548f63f-971c-4c53-b9bf-043cdc059035\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","    <tr>\n","      <th>store_nbr</th>\n","      <th>id</th>\n","      <th>family</th>\n","      <th>date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"5\" valign=\"top\">1</th>\n","      <th>0</th>\n","      <th>AUTOMOTIVE</th>\n","      <th>2013-01-01</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <th>BABY CARE</th>\n","      <th>2013-01-01</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <th>BEAUTY</th>\n","      <th>2013-01-01</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <th>BEVERAGES</th>\n","      <th>2013-01-01</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <th>BOOKS</th>\n","      <th>2013-01-01</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <th>...</th>\n","      <th>...</th>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"5\" valign=\"top\">54</th>\n","      <th>3000751</th>\n","      <th>POULTRY</th>\n","      <th>2017-08-15</th>\n","      <td>59.619</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3000752</th>\n","      <th>PREPARED FOODS</th>\n","      <th>2017-08-15</th>\n","      <td>94.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3000753</th>\n","      <th>PRODUCE</th>\n","      <th>2017-08-15</th>\n","      <td>915.371</td>\n","      <td>76</td>\n","    </tr>\n","    <tr>\n","      <th>3000754</th>\n","      <th>SCHOOL AND OFFICE SUPPLIES</th>\n","      <th>2017-08-15</th>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3000755</th>\n","      <th>SEAFOOD</th>\n","      <th>2017-08-15</th>\n","      <td>3.000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7548f63f-971c-4c53-b9bf-043cdc059035')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7548f63f-971c-4c53-b9bf-043cdc059035 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7548f63f-971c-4c53-b9bf-043cdc059035');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                                                           sales  onpromotion\n","store_nbr id      family                     date                            \n","1         0       AUTOMOTIVE                 2013-01-01    0.000            0\n","          1       BABY CARE                  2013-01-01    0.000            0\n","          2       BEAUTY                     2013-01-01    0.000            0\n","          3       BEVERAGES                  2013-01-01    0.000            0\n","          4       BOOKS                      2013-01-01    0.000            0\n","...                                                          ...          ...\n","54        3000751 POULTRY                    2017-08-15   59.619            0\n","          3000752 PREPARED FOODS             2017-08-15   94.000            0\n","          3000753 PRODUCE                    2017-08-15  915.371           76\n","          3000754 SCHOOL AND OFFICE SUPPLIES 2017-08-15    0.000            0\n","          3000755 SEAFOOD                    2017-08-15    3.000            0\n","\n","[3000888 rows x 2 columns]"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["df_mod = df.set_index(['store_nbr','id','family','date']).sort_index()\n","df_mod"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1684313752488,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"Qa30tzwcfWOy","outputId":"555503cd-ecdd-4a5b-ae77-996afab8bec3"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-1d9183f5-ebd0-4ee7-8a69-9edbb88d0f30\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>store_nbr</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3.000888e+06</td>\n","      <td>3.000888e+06</td>\n","      <td>3.000888e+06</td>\n","      <td>3.000888e+06</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.500444e+06</td>\n","      <td>2.750000e+01</td>\n","      <td>3.577757e+02</td>\n","      <td>2.602770e+00</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>8.662819e+05</td>\n","      <td>1.558579e+01</td>\n","      <td>1.101998e+03</td>\n","      <td>1.221888e+01</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000e+00</td>\n","      <td>1.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>7.502218e+05</td>\n","      <td>1.400000e+01</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.500444e+06</td>\n","      <td>2.750000e+01</td>\n","      <td>1.100000e+01</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.250665e+06</td>\n","      <td>4.100000e+01</td>\n","      <td>1.958473e+02</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.000887e+06</td>\n","      <td>5.400000e+01</td>\n","      <td>1.247170e+05</td>\n","      <td>7.410000e+02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d9183f5-ebd0-4ee7-8a69-9edbb88d0f30')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1d9183f5-ebd0-4ee7-8a69-9edbb88d0f30 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1d9183f5-ebd0-4ee7-8a69-9edbb88d0f30');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                 id     store_nbr         sales   onpromotion\n","count  3.000888e+06  3.000888e+06  3.000888e+06  3.000888e+06\n","mean   1.500444e+06  2.750000e+01  3.577757e+02  2.602770e+00\n","std    8.662819e+05  1.558579e+01  1.101998e+03  1.221888e+01\n","min    0.000000e+00  1.000000e+00  0.000000e+00  0.000000e+00\n","25%    7.502218e+05  1.400000e+01  0.000000e+00  0.000000e+00\n","50%    1.500444e+06  2.750000e+01  1.100000e+01  0.000000e+00\n","75%    2.250665e+06  4.100000e+01  1.958473e+02  0.000000e+00\n","max    3.000887e+06  5.400000e+01  1.247170e+05  7.410000e+02"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1684313752490,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"2ZzPFVSIfatT","outputId":"8b8fb4c1-c2a9-4e5b-ccc2-f018b71310de"},"outputs":[{"data":{"text/plain":["(3000888, 6)"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1684313752491,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"lUut1ySVfqN_","outputId":"92e355cc-19d3-4189-bb24-7cd353f1bf18"},"outputs":[{"data":{"text/plain":["0             0.000\n","1             0.000\n","2             0.000\n","3             0.000\n","4             0.000\n","             ...   \n","3000883     438.133\n","3000884     154.553\n","3000885    2419.729\n","3000886     121.000\n","3000887      16.000\n","Name: sales, Length: 3000888, dtype: float64"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["df['sales']"]},{"cell_type":"markdown","metadata":{"id":"HQ-mcuHZgbrY"},"source":["##**EDA**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1684313752492,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"cE_l2JQtgX4W","outputId":"e1c4eb2f-f655-4ece-e51e-1c20bec5467a"},"outputs":[{"data":{"text/plain":["id             0\n","date           0\n","store_nbr      0\n","family         0\n","sales          0\n","onpromotion    0\n","dtype: int64"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["#cek missing value\n","df.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1684313752493,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"uWbJTUpRg36b","outputId":"e81d7516-ce50-49fe-c74b-229186a2a889"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-a477e23e-0c25-4b6b-a886-8f98c5ecffb1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a477e23e-0c25-4b6b-a886-8f98c5ecffb1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a477e23e-0c25-4b6b-a886-8f98c5ecffb1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a477e23e-0c25-4b6b-a886-8f98c5ecffb1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["Empty DataFrame\n","Columns: [id, date, store_nbr, family, sales, onpromotion]\n","Index: []"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["#duplicate\n","dup_rows = df[df.duplicated(['id','date','store_nbr','family','sales','onpromotion'])]\n","dup_rows.head(8)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":600},"executionInfo":{"elapsed":1157,"status":"ok","timestamp":1684313753629,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"pu36UJofw1L0","outputId":"5ddf5835-bf86-4707-bf9d-61ca7dd62bf0"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-16-0556cab5dac2>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  cor = df.corr()\n"]},{"data":{"text/plain":["<Axes: >"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x600 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["cor = df.corr()\n","\n","plt.figure(figsize = (10,6))\n","sns.heatmap(cor, annot = True)"]},{"cell_type":"markdown","metadata":{"id":"dUcckJuBrFVg"},"source":["##**Feature Engineering**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oZRK5jhHrHwI"},"outputs":[],"source":["df['date'] = pd.to_datetime(df['date'],format='%d-%m-%Y')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9jshM-Jsrh9D"},"outputs":[],"source":["df['year']=df['date'].dt.year\n","df['month']=df['date'].dt.month\n","df['day']=df['date'].dt.day"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IYXrq3KMKuLY"},"outputs":[],"source":["df['month_year'] = df['date'].dt.strftime('%m-%Y')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RjQlRfjlynZb"},"outputs":[],"source":["df['dayofweek_num']=df['date'].dt.dayofweek"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ot2sb3vvH3gx"},"outputs":[],"source":["def applyer(row):\n","    if row.dayofweek == 5 or row.dayofweek == 6:\n","        return 1\n","    else:\n","        return 0\n","temp= df['date'].apply(applyer)\n","df['weekend']=temp"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1685088224911,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"PM0BHSPqIL51","outputId":"c8af23cb-33ed-40f6-9d4a-33eb2076b017"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id       date  store_nbr      family  sales  onpromotion  year  month  day  \\\n","0   0 2013-01-01          1  AUTOMOTIVE    0.0            0  2013      1    1   \n","1   1 2013-01-01          1   BABY CARE    0.0            0  2013      1    1   \n","2   2 2013-01-01          1      BEAUTY    0.0            0  2013      1    1   \n","3   3 2013-01-01          1   BEVERAGES    0.0            0  2013      1    1   \n","4   4 2013-01-01          1       BOOKS    0.0            0  2013      1    1   \n","\n","  month_year  dayofweek_num  weekend  \n","0    01-2013              1        0  \n","1    01-2013              1        0  \n","2    01-2013              1        0  \n","3    01-2013              1        0  \n","4    01-2013              1        0  "],"text/html":["\n","  <div id=\"df-4a3d7df8-7c45-4d60-a2b3-421ba47e9e06\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","      <th>month_year</th>\n","      <th>dayofweek_num</th>\n","      <th>weekend</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>01-2013</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>01-2013</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>01-2013</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>01-2013</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>01-2013</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a3d7df8-7c45-4d60-a2b3-421ba47e9e06')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4a3d7df8-7c45-4d60-a2b3-421ba47e9e06 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4a3d7df8-7c45-4d60-a2b3-421ba47e9e06');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":60}],"source":["df.head()"]},{"cell_type":"markdown","metadata":{"id":"y4CY2yjSPrPr"},"source":["- Dayofweek_num:\n","\n","> 0 : Monday\n","\n","> 1 : Tuesday\n","\n","> 2 : Wednesday\n","\n","> 3 : Thursday\n","\n","> 4 : Friday\n","\n","> 5 : Saturday\n","\n","> 6 : Sunday\n","\n","- Weekend:\n","\n","> 1 = Yes\n","\n","> 0 = No"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1684313775604,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"t794t08xN2_H","outputId":"13a9ea81-68df-4484-f7cc-923928f2adea"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='year'>"]},"execution_count":23,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df.groupby('year')['sales'].mean().plot.bar()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"executionInfo":{"elapsed":876,"status":"ok","timestamp":1684313776453,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"DfpmpPgKN77-","outputId":"91d4f913-5f4a-4152-f59c-82beb7573486"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='month'>"]},"execution_count":24,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df.groupby('month')['sales'].mean().plot.bar()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1684313776454,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"kzc32wP5PHnD","outputId":"6cb7dc33-170f-46b4-e5c5-12324068a1c4"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='day'>"]},"execution_count":25,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df.groupby('day')['sales'].mean().plot.bar()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"elapsed":956,"status":"ok","timestamp":1684313777398,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"soXGKrf4QTHJ","outputId":"c963a45d-5317-4909-a05e-77f53b7b995f"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='dayofweek_num'>"]},"execution_count":26,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df.groupby('dayofweek_num')['sales'].mean().plot.bar()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1684313777400,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"lHPUk9U5PlhY","outputId":"dd694ce5-9247-43b9-d84b-e0050610a07b"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='weekend'>"]},"execution_count":27,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df.groupby('weekend')['sales'].mean().plot.bar()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":509},"executionInfo":{"elapsed":899,"status":"ok","timestamp":1684977375994,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"BH_olR6JOHxG","outputId":"985ddc30-4812-412e-de35-ea37d4e1fed7"},"outputs":[{"data":{"text/plain":["<Axes: title={'center': 'Sales (Count)'}, xlabel='year,month'>"]},"execution_count":10,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1500x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["temp2 =df.groupby(['year', 'month'])['sales'].mean()\n","temp2.plot(figsize=(15,5), title= 'Sales (Count)', fontsize=14)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":721},"executionInfo":{"elapsed":87193,"status":"ok","timestamp":1684313864577,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"Vc6Be7bkXXya","outputId":"6f20bcff-b996-498b-ca1f-df0bf918b619"},"outputs":[{"data":{"text/plain":["<Axes: xlabel='date', ylabel='sales'>"]},"execution_count":29,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.set(rc={'figure.figsize' : (12,8)})\n","sns.lineplot(x=df['date'], y=df['sales'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1684313864578,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"ZPoLfsXbF8AN","outputId":"e2fcd975-e89f-44c6-c0d8-f64939b331f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3000888 entries, 0 to 3000887\n","Data columns (total 12 columns):\n"," #   Column         Dtype         \n","---  ------         -----         \n"," 0   id             int64         \n"," 1   date           datetime64[ns]\n"," 2   store_nbr      int64         \n"," 3   family         object        \n"," 4   sales          float64       \n"," 5   onpromotion    int64         \n"," 6   year           int64         \n"," 7   month          int64         \n"," 8   day            int64         \n"," 9   month_year     object        \n"," 10  dayofweek_num  int64         \n"," 11  weekend        int64         \n","dtypes: datetime64[ns](1), float64(1), int64(8), object(2)\n","memory usage: 274.7+ MB\n"]}],"source":["df.info()"]},{"cell_type":"markdown","metadata":{"id":"wZ-4yDfu7yPQ"},"source":["#**Determine Order of Differencing**"]},{"cell_type":"markdown","metadata":{"id":"kPe6_AqgA9bC"},"source":["Menganalisis pola data (Stasioner, musiman dan trend) serta residu"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9GOn79SaCefx"},"outputs":[],"source":["temp_1 = df.groupby('date')['sales'].sum().reset_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1684387976693,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"aigkxkEnCmMI","outputId":"c03fe258-15cd-4b3c-f84e-2ee1da0099ff"},"outputs":[{"name":"stdout","output_type":"stream","text":["0          0\n","1          0\n","2          0\n","3          0\n","4          0\n","          ..\n","3000883    0\n","3000884    0\n","3000885    0\n","3000886    0\n","3000887    0\n","Name: date, Length: 3000888, dtype: int64\n"]}],"source":["print(temp)"]},{"cell_type":"markdown","metadata":{"id":"X3cQBDiemul_"},"source":["##**I. CHECK SEASONAL, TREND, SIKLIS, DAN ERROR MODEL**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sSdqHp4lAN99"},"outputs":[],"source":["from statsmodels.tsa.seasonal import seasonal_decompose"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":2802,"status":"ok","timestamp":1684388019023,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"gxFrWwL1AYup","outputId":"3b51bfdb-c60c-4d3e-e2ce-74a3ce898475"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'Residual Plot')"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x2000 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# decompose the time series\n","decomposition = seasonal_decompose(temp_1['sales'], model='additive', period=12)\n","\n","# create a seasonal plot\n","fig, axes = plt.subplots(nrows=4, ncols=1, figsize=(10,20))\n","fig.subplots_adjust(hspace=0.5) # added space between subplots\n","\n","decomposition.observed.plot(ax=axes[0], legend=False)\n","axes[0].set_ylabel('Observed')\n","axes[0].set_title('Observed Seasonal Plot')\n","\n","decomposition.trend.plot(ax=axes[1], legend=False)\n","axes[1].set_ylabel('Trend')\n","axes[1].set_title('Trend Plot')\n","\n","decomposition.seasonal.plot(ax=axes[2], legend=False)\n","axes[2].set_ylabel('Seasonal')\n","axes[2].set_title('Seasonal Plot')\n","\n","decomposition.resid.plot(ax=axes[3], legend=False)\n","axes[3].set_ylabel('Residual')\n","axes[3].set_title('Residual Plot')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VqDaHSc3DsCh"},"outputs":[],"source":["from statsmodels.graphics.tsaplots import plot_acf, plot_pacf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":887},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1684388040306,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"T2ZWOoe4DVog","outputId":"6bbbbc3e-1826-4411-eeb6-0b04a0570971"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"execution_count":18,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_acf(temp_1['sales'], alpha = 0.05)"]},{"cell_type":"markdown","metadata":{"id":"skmiLSHQowHR"},"source":["Berdasarkan plot ACF, data dapat disimpulkan bahwa data merupakan data musiman atau seasonal setiap 7 hari"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":942},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1684388046666,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"kLwU65_T2MOI","outputId":"d00081ee-f919-4439-b33b-e62f3fbd2d5c"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/graphics/tsaplots.py:348: FutureWarning: The default method 'yw' can produce PACF values outside of the [-1,1] interval. After 0.13, the default will change tounadjusted Yule-Walker ('ywm'). You can use this method now by setting method='ywm'.\n","  warnings.warn(\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"execution_count":19,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_pacf(temp_1['sales'], alpha = 0.05)"]},{"cell_type":"markdown","metadata":{"id":"2FWkIDG-1268"},"source":["##**II. CHECK STASIONER MODEL**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-io9sNor1nhu"},"outputs":[],"source":["from statsmodels.tsa.stattools import adfuller"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_C0zzodn5fdM"},"outputs":[],"source":["temp_sales = temp_1['sales']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1684388062533,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"T1qWnVKx2G5i","outputId":"aed1ac7f-395e-440d-f8d0-eccd7096292d"},"outputs":[{"name":"stdout","output_type":"stream","text":["ADF Statistic: -2.616196\n","p-value: 0.089696\n","Critical Values:\n","\t1%: -3.434\n","\t5%: -2.863\n","\t10%: -2.568\n"]}],"source":["# assuming your time series data is stored in a variable called 'ts'\n","result = adfuller(temp_sales)\n","\n","print('ADF Statistic: %f' % result[0])\n","print('p-value: %f' % result[1])\n","print('Critical Values:')\n","for key, value in result[4].items():\n","    print('\\t%s: %.3f' % (key, value))"]},{"cell_type":"markdown","metadata":{"id":"VjgREq4g4yX_"},"source":["Penjabaran : Karena Nilai p-value = 0,089696 yang mana kurang dari 0,05, maka kita dapat menolak hipotesis nol dengan tingkat kepercayaan 95%, dan menyimpulkan bahwa **data bukan merupakan time series stasioner.**"]},{"cell_type":"markdown","metadata":{"id":"E8bCWans-ljJ"},"source":["#**Analisis Time Series**"]},{"cell_type":"markdown","metadata":{"id":"_6WsplZSpmz4"},"source":["##**Analisis time series**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kuP5Q-tK-qVR"},"outputs":[],"source":["#from prophet import Prophet\n","from multiprocessing import Pool, cpu_count\n","from tqdm import tqdm"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7rE8JyGmAMMd"},"outputs":[],"source":["df.reset_index(inplace=True)\n","df1= df[['date','store_nbr','family','sales']]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1685191744314,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"GHnwcoWfBUfE","outputId":"6dd517aa-2c49-4bd5-ba5d-b12eff873425"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date  store_nbr                      family     sales\n","0       2013-01-01          1                  AUTOMOTIVE     0.000\n","1       2013-01-01          1                   BABY CARE     0.000\n","2       2013-01-01          1                      BEAUTY     0.000\n","3       2013-01-01          1                   BEVERAGES     0.000\n","4       2013-01-01          1                       BOOKS     0.000\n","...            ...        ...                         ...       ...\n","3000883 2017-08-15          9                     POULTRY   438.133\n","3000884 2017-08-15          9              PREPARED FOODS   154.553\n","3000885 2017-08-15          9                     PRODUCE  2419.729\n","3000886 2017-08-15          9  SCHOOL AND OFFICE SUPPLIES   121.000\n","3000887 2017-08-15          9                     SEAFOOD    16.000\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-33923caf-697d-446c-b853-fc8f15134d4e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3000883</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>POULTRY</td>\n","      <td>438.133</td>\n","    </tr>\n","    <tr>\n","      <th>3000884</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PREPARED FOODS</td>\n","      <td>154.553</td>\n","    </tr>\n","    <tr>\n","      <th>3000885</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PRODUCE</td>\n","      <td>2419.729</td>\n","    </tr>\n","    <tr>\n","      <th>3000886</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SCHOOL AND OFFICE SUPPLIES</td>\n","      <td>121.000</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SEAFOOD</td>\n","      <td>16.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33923caf-697d-446c-b853-fc8f15134d4e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-33923caf-697d-446c-b853-fc8f15134d4e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-33923caf-697d-446c-b853-fc8f15134d4e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}],"source":["df1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-_q_j2XEAYa0"},"outputs":[],"source":["store_nbr = []\n","for row in df1['store_nbr'].unique():\n","    store_nbr.append(row)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XjnpRlxCAfb8"},"outputs":[],"source":["def train_and_forecast(group):\n","\n","    m = Prophet()\n","\n","    m.fit(group)\n","\n","    #predict\n","    future = m.make_future_dataframe(16)\n","    forecast = m.predict(future)[['ds','yhat','yhat_lower','yhat_upper']]\n","    forecast['ticker'] = group['ticker'].iloc[0]\n","\n","    return forecast[['ds','ticker','yhat','yhat_lower','yhat_upper']]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1857,"status":"ok","timestamp":1685191750351,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"PFzEZgGLAj3e","outputId":"7e11e9e6-c59f-44df-e15d-361993a466eb"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-15-a0df81e0fdd3>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df1['family'] = df1['family'].astype(str) + df1['store_nbr'].astype(str)\n"]}],"source":["#create column for join/merge level\n","df1['family'] = df1['family'].astype(str) + df1['store_nbr'].astype(str)\n","df1 = df1[['date','store_nbr','family','sales']]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":523,"status":"ok","timestamp":1685191754549,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"QMpjlFKhAso6","outputId":"6b29577e-cc2c-4aaf-9038-27715569a919"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date  store_nbr                       family     sales\n","0       2013-01-01          1                  AUTOMOTIVE1     0.000\n","1       2013-01-01          1                   BABY CARE1     0.000\n","2       2013-01-01          1                      BEAUTY1     0.000\n","3       2013-01-01          1                   BEVERAGES1     0.000\n","4       2013-01-01          1                       BOOKS1     0.000\n","...            ...        ...                          ...       ...\n","3000883 2017-08-15          9                     POULTRY9   438.133\n","3000884 2017-08-15          9              PREPARED FOODS9   154.553\n","3000885 2017-08-15          9                     PRODUCE9  2419.729\n","3000886 2017-08-15          9  SCHOOL AND OFFICE SUPPLIES9   121.000\n","3000887 2017-08-15          9                     SEAFOOD9    16.000\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-8693eeac-9c6c-4e5a-ae15-d885e363ebcb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3000883</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>POULTRY9</td>\n","      <td>438.133</td>\n","    </tr>\n","    <tr>\n","      <th>3000884</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PREPARED FOODS9</td>\n","      <td>154.553</td>\n","    </tr>\n","    <tr>\n","      <th>3000885</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PRODUCE9</td>\n","      <td>2419.729</td>\n","    </tr>\n","    <tr>\n","      <th>3000886</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SCHOOL AND OFFICE SUPPLIES9</td>\n","      <td>121.000</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SEAFOOD9</td>\n","      <td>16.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8693eeac-9c6c-4e5a-ae15-d885e363ebcb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8693eeac-9c6c-4e5a-ae15-d885e363ebcb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8693eeac-9c6c-4e5a-ae15-d885e363ebcb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["df1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b0i87Gc3AvMZ","executionInfo":{"status":"ok","timestamp":1685193367017,"user_tz":-420,"elapsed":35332,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"f6496239-ba3c-40d9-e955-4bf50323396d"},"outputs":[{"output_type":"stream","name":"stderr","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93793', 'data', 'file=/tmp/tmp7sc_ch5k/kzu_o01s.json', 'init=/tmp/tmp7sc_ch5k/vb5y8o86.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellgvz40zv/prophet_model-20230527130810.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/66ngi25q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_gzrpps6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47285', 'data', 'file=/tmp/tmp7sc_ch5k/66ngi25q.json', 'init=/tmp/tmp7sc_ch5k/_gzrpps6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele0wydx01/prophet_model-20230527130811.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wofq7508.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3lycru4v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55680', 'data', 'file=/tmp/tmp7sc_ch5k/wofq7508.json', 'init=/tmp/tmp7sc_ch5k/3lycru4v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljxhibdb3/prophet_model-20230527130812.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h1sztxwg.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uhhhm7rj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69605', 'data', 'file=/tmp/tmp7sc_ch5k/h1sztxwg.json', 'init=/tmp/tmp7sc_ch5k/uhhhm7rj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnhu4ys9c/prophet_model-20230527130813.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/63u31_ws.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a9oh6rrp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44261', 'data', 'file=/tmp/tmp7sc_ch5k/63u31_ws.json', 'init=/tmp/tmp7sc_ch5k/a9oh6rrp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1_j74oob/prophet_model-20230527130813.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qf3nfx9m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ol78zizn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15927', 'data', 'file=/tmp/tmp7sc_ch5k/qf3nfx9m.json', 'init=/tmp/tmp7sc_ch5k/ol78zizn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelu2anqi3_/prophet_model-20230527130814.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qrtmn9m0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gvwu10no.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62909', 'data', 'file=/tmp/tmp7sc_ch5k/qrtmn9m0.json', 'init=/tmp/tmp7sc_ch5k/gvwu10no.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelmz3unck4/prophet_model-20230527130815.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7qu75noh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b3556dg2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37443', 'data', 'file=/tmp/tmp7sc_ch5k/7qu75noh.json', 'init=/tmp/tmp7sc_ch5k/b3556dg2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpktulac5/prophet_model-20230527130816.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9n7ocvw1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kq0vdl82.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72797', 'data', 'file=/tmp/tmp7sc_ch5k/9n7ocvw1.json', 'init=/tmp/tmp7sc_ch5k/kq0vdl82.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwmgt6zlj/prophet_model-20230527130817.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1rr7p5vo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_w5_52bt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51606', 'data', 'file=/tmp/tmp7sc_ch5k/1rr7p5vo.json', 'init=/tmp/tmp7sc_ch5k/_w5_52bt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelic94g26w/prophet_model-20230527130818.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p8dvdfup.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gffpkt1a.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57527', 'data', 'file=/tmp/tmp7sc_ch5k/p8dvdfup.json', 'init=/tmp/tmp7sc_ch5k/gffpkt1a.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaro6ltjk/prophet_model-20230527130819.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/evzmie1a.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l7sze_yl.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25897', 'data', 'file=/tmp/tmp7sc_ch5k/evzmie1a.json', 'init=/tmp/tmp7sc_ch5k/l7sze_yl.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelr0hanq76/prophet_model-20230527130820.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9bptlxp5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f24km4us.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63248', 'data', 'file=/tmp/tmp7sc_ch5k/9bptlxp5.json', 'init=/tmp/tmp7sc_ch5k/f24km4us.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnx453pjj/prophet_model-20230527130821.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yrk2n0wz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s8gmxr0_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13971', 'data', 'file=/tmp/tmp7sc_ch5k/yrk2n0wz.json', 'init=/tmp/tmp7sc_ch5k/s8gmxr0_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeloxn4gajp/prophet_model-20230527130822.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0dokj9yz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/heejrspu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41996', 'data', 'file=/tmp/tmp7sc_ch5k/0dokj9yz.json', 'init=/tmp/tmp7sc_ch5k/heejrspu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelanlmrkff/prophet_model-20230527130822.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5_dd_mjn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5ygd2x9o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70135', 'data', 'file=/tmp/tmp7sc_ch5k/5_dd_mjn.json', 'init=/tmp/tmp7sc_ch5k/5ygd2x9o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelplt_1snk/prophet_model-20230527130823.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fdol9nmq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9h3ih_j4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15790', 'data', 'file=/tmp/tmp7sc_ch5k/fdol9nmq.json', 'init=/tmp/tmp7sc_ch5k/9h3ih_j4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkxwlvd9b/prophet_model-20230527130824.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/elauh0bw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hg3oynbj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90727', 'data', 'file=/tmp/tmp7sc_ch5k/elauh0bw.json', 'init=/tmp/tmp7sc_ch5k/hg3oynbj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3c0i7ixl/prophet_model-20230527130825.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8o62m6cy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wu1cknow.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61439', 'data', 'file=/tmp/tmp7sc_ch5k/8o62m6cy.json', 'init=/tmp/tmp7sc_ch5k/wu1cknow.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwlvo1dh_/prophet_model-20230527130826.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7cyx51y9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xic0wp__.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67201', 'data', 'file=/tmp/tmp7sc_ch5k/7cyx51y9.json', 'init=/tmp/tmp7sc_ch5k/xic0wp__.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsr2q7c9d/prophet_model-20230527130827.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cn2u510n.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aum87ct6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3267', 'data', 'file=/tmp/tmp7sc_ch5k/cn2u510n.json', 'init=/tmp/tmp7sc_ch5k/aum87ct6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4bzd_258/prophet_model-20230527130828.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tdpht9pw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/igaoya97.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41365', 'data', 'file=/tmp/tmp7sc_ch5k/tdpht9pw.json', 'init=/tmp/tmp7sc_ch5k/igaoya97.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelytbyan00/prophet_model-20230527130829.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a7d7_e1p.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n8q_v7ih.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5156', 'data', 'file=/tmp/tmp7sc_ch5k/a7d7_e1p.json', 'init=/tmp/tmp7sc_ch5k/n8q_v7ih.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltr3yuml5/prophet_model-20230527130830.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kwn1ay9h.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cyfea613.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9350', 'data', 'file=/tmp/tmp7sc_ch5k/kwn1ay9h.json', 'init=/tmp/tmp7sc_ch5k/cyfea613.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelntpv0sxx/prophet_model-20230527130832.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eiyojwnw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rjil2t5i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68065', 'data', 'file=/tmp/tmp7sc_ch5k/eiyojwnw.json', 'init=/tmp/tmp7sc_ch5k/rjil2t5i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellp1vd49j/prophet_model-20230527130833.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/maanqh5b.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fwqen3mf.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25510', 'data', 'file=/tmp/tmp7sc_ch5k/maanqh5b.json', 'init=/tmp/tmp7sc_ch5k/fwqen3mf.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model80rxyaog/prophet_model-20230527130834.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g2f16wv9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xu5ue1sw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67385', 'data', 'file=/tmp/tmp7sc_ch5k/g2f16wv9.json', 'init=/tmp/tmp7sc_ch5k/xu5ue1sw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele3l8ljh_/prophet_model-20230527130835.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y22nnkbh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ovbftg15.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44070', 'data', 'file=/tmp/tmp7sc_ch5k/y22nnkbh.json', 'init=/tmp/tmp7sc_ch5k/ovbftg15.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelk6ydu7k3/prophet_model-20230527130835.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qwe51nvf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nv744xw1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68950', 'data', 'file=/tmp/tmp7sc_ch5k/qwe51nvf.json', 'init=/tmp/tmp7sc_ch5k/nv744xw1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0p7m234j/prophet_model-20230527130836.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0xy_uhq8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u1obc3o0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52199', 'data', 'file=/tmp/tmp7sc_ch5k/0xy_uhq8.json', 'init=/tmp/tmp7sc_ch5k/u1obc3o0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellbjheuct/prophet_model-20230527130837.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5b7lmgqu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1r003spd.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1562', 'data', 'file=/tmp/tmp7sc_ch5k/5b7lmgqu.json', 'init=/tmp/tmp7sc_ch5k/1r003spd.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbn157bbj/prophet_model-20230527130838.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lezt_uqx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2l8kygec.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43691', 'data', 'file=/tmp/tmp7sc_ch5k/lezt_uqx.json', 'init=/tmp/tmp7sc_ch5k/2l8kygec.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1sx79s6p/prophet_model-20230527130839.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t4dn9lno.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/soyu7s4s.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41085', 'data', 'file=/tmp/tmp7sc_ch5k/t4dn9lno.json', 'init=/tmp/tmp7sc_ch5k/soyu7s4s.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpoxwmo0x/prophet_model-20230527130839.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/04ewcl4n.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7j_4hw0a.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74298', 'data', 'file=/tmp/tmp7sc_ch5k/04ewcl4n.json', 'init=/tmp/tmp7sc_ch5k/7j_4hw0a.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp_kq7g3n/prophet_model-20230527130840.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/om4v0ly9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i6tx22a8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69871', 'data', 'file=/tmp/tmp7sc_ch5k/om4v0ly9.json', 'init=/tmp/tmp7sc_ch5k/i6tx22a8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelb3h40wng/prophet_model-20230527130841.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aurozmoc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nog5wji3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70298', 'data', 'file=/tmp/tmp7sc_ch5k/aurozmoc.json', 'init=/tmp/tmp7sc_ch5k/nog5wji3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaid0m5jc/prophet_model-20230527130842.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s6dc9unn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s1khgun7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73066', 'data', 'file=/tmp/tmp7sc_ch5k/s6dc9unn.json', 'init=/tmp/tmp7sc_ch5k/s1khgun7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnis6g_zn/prophet_model-20230527130843.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rys1r5ps.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qonrl6c7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58704', 'data', 'file=/tmp/tmp7sc_ch5k/rys1r5ps.json', 'init=/tmp/tmp7sc_ch5k/qonrl6c7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelo2mac2ag/prophet_model-20230527130843.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_ouanzmr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pmlc0z_n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79383', 'data', 'file=/tmp/tmp7sc_ch5k/_ouanzmr.json', 'init=/tmp/tmp7sc_ch5k/pmlc0z_n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7_3rui8z/prophet_model-20230527130844.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x5hc5iw7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9qse2786.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29389', 'data', 'file=/tmp/tmp7sc_ch5k/x5hc5iw7.json', 'init=/tmp/tmp7sc_ch5k/9qse2786.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelylia5c2r/prophet_model-20230527130846.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g4swlsfo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7xw33gjk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88640', 'data', 'file=/tmp/tmp7sc_ch5k/g4swlsfo.json', 'init=/tmp/tmp7sc_ch5k/7xw33gjk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6alobk6n/prophet_model-20230527130847.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ixulrmbq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0bnzaqj_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29144', 'data', 'file=/tmp/tmp7sc_ch5k/ixulrmbq.json', 'init=/tmp/tmp7sc_ch5k/0bnzaqj_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4w652wab/prophet_model-20230527130848.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8ec6mi5f.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3yw6f5wr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73650', 'data', 'file=/tmp/tmp7sc_ch5k/8ec6mi5f.json', 'init=/tmp/tmp7sc_ch5k/3yw6f5wr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnpbxnfdq/prophet_model-20230527130848.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_n_t5xf_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l26uffgv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81933', 'data', 'file=/tmp/tmp7sc_ch5k/_n_t5xf_.json', 'init=/tmp/tmp7sc_ch5k/l26uffgv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelf09naf5n/prophet_model-20230527130849.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7zivzk8l.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ubs8m43r.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71111', 'data', 'file=/tmp/tmp7sc_ch5k/7zivzk8l.json', 'init=/tmp/tmp7sc_ch5k/ubs8m43r.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgljkqo6f/prophet_model-20230527130850.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z1piv1s6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/o6dt224j.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41267', 'data', 'file=/tmp/tmp7sc_ch5k/z1piv1s6.json', 'init=/tmp/tmp7sc_ch5k/o6dt224j.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelda1jaf59/prophet_model-20230527130851.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gae7dhu6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yznpzcqp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50620', 'data', 'file=/tmp/tmp7sc_ch5k/gae7dhu6.json', 'init=/tmp/tmp7sc_ch5k/yznpzcqp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5kb6lhff/prophet_model-20230527130852.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ldityw3s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1orm9o5o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29142', 'data', 'file=/tmp/tmp7sc_ch5k/ldityw3s.json', 'init=/tmp/tmp7sc_ch5k/1orm9o5o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4bffairi/prophet_model-20230527130853.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xpobfs60.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w26iy8pp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51165', 'data', 'file=/tmp/tmp7sc_ch5k/xpobfs60.json', 'init=/tmp/tmp7sc_ch5k/w26iy8pp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelc8irw_q5/prophet_model-20230527130854.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mh_sfhmo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cnd4w50s.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55713', 'data', 'file=/tmp/tmp7sc_ch5k/mh_sfhmo.json', 'init=/tmp/tmp7sc_ch5k/cnd4w50s.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln6tcx8qp/prophet_model-20230527130854.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ig0v15fy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/525jeg5n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77645', 'data', 'file=/tmp/tmp7sc_ch5k/ig0v15fy.json', 'init=/tmp/tmp7sc_ch5k/525jeg5n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9gu799lw/prophet_model-20230527130856.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4y3ev69j.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r_hly0q_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40634', 'data', 'file=/tmp/tmp7sc_ch5k/4y3ev69j.json', 'init=/tmp/tmp7sc_ch5k/r_hly0q_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely9e1nwdx/prophet_model-20230527130856.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dp4vn62s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/iy_1g33k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82825', 'data', 'file=/tmp/tmp7sc_ch5k/dp4vn62s.json', 'init=/tmp/tmp7sc_ch5k/iy_1g33k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxqophtym/prophet_model-20230527130857.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u8xfhg29.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/icqy38h7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=60376', 'data', 'file=/tmp/tmp7sc_ch5k/u8xfhg29.json', 'init=/tmp/tmp7sc_ch5k/icqy38h7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele8taq3mr/prophet_model-20230527130859.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:08:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:08:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pgjfumir.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ipng6bhj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92759', 'data', 'file=/tmp/tmp7sc_ch5k/pgjfumir.json', 'init=/tmp/tmp7sc_ch5k/ipng6bhj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelazbzgx1u/prophet_model-20230527130900.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j51ccs3r.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1jj9wtpj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29815', 'data', 'file=/tmp/tmp7sc_ch5k/j51ccs3r.json', 'init=/tmp/tmp7sc_ch5k/1jj9wtpj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkpc8nax7/prophet_model-20230527130901.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ruhh54uk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h0no87q6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88933', 'data', 'file=/tmp/tmp7sc_ch5k/ruhh54uk.json', 'init=/tmp/tmp7sc_ch5k/h0no87q6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelagiatvqy/prophet_model-20230527130902.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d4una8of.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0fw62oh6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93032', 'data', 'file=/tmp/tmp7sc_ch5k/d4una8of.json', 'init=/tmp/tmp7sc_ch5k/0fw62oh6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model69x73bhb/prophet_model-20230527130903.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jojp3geg.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i38drx7j.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20875', 'data', 'file=/tmp/tmp7sc_ch5k/jojp3geg.json', 'init=/tmp/tmp7sc_ch5k/i38drx7j.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelmitq2pud/prophet_model-20230527130904.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ar842s34.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x7vj1ai7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43553', 'data', 'file=/tmp/tmp7sc_ch5k/ar842s34.json', 'init=/tmp/tmp7sc_ch5k/x7vj1ai7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9kox7urk/prophet_model-20230527130905.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/97d2qsjb.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vte1pqh2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55261', 'data', 'file=/tmp/tmp7sc_ch5k/97d2qsjb.json', 'init=/tmp/tmp7sc_ch5k/vte1pqh2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1y71nwqk/prophet_model-20230527130905.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gq489izm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kwj3i0_1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4819', 'data', 'file=/tmp/tmp7sc_ch5k/gq489izm.json', 'init=/tmp/tmp7sc_ch5k/kwj3i0_1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3tjzyf4n/prophet_model-20230527130906.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t0k406l1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vz3oz86m.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80959', 'data', 'file=/tmp/tmp7sc_ch5k/t0k406l1.json', 'init=/tmp/tmp7sc_ch5k/vz3oz86m.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgm8hrijw/prophet_model-20230527130907.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f08i92_9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f8sq2kr3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92526', 'data', 'file=/tmp/tmp7sc_ch5k/f08i92_9.json', 'init=/tmp/tmp7sc_ch5k/f8sq2kr3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6p6ote0s/prophet_model-20230527130908.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wouv72kk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/trfvsbdp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55410', 'data', 'file=/tmp/tmp7sc_ch5k/wouv72kk.json', 'init=/tmp/tmp7sc_ch5k/trfvsbdp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeliba7k8p_/prophet_model-20230527130909.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l04cu1zy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dcvlye_7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79688', 'data', 'file=/tmp/tmp7sc_ch5k/l04cu1zy.json', 'init=/tmp/tmp7sc_ch5k/dcvlye_7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model88rw8irc/prophet_model-20230527130910.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ixtjaya4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h1vq8krs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23883', 'data', 'file=/tmp/tmp7sc_ch5k/ixtjaya4.json', 'init=/tmp/tmp7sc_ch5k/h1vq8krs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellk4j7ezy/prophet_model-20230527130911.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zmnqacks.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2pgyklcm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47758', 'data', 'file=/tmp/tmp7sc_ch5k/zmnqacks.json', 'init=/tmp/tmp7sc_ch5k/2pgyklcm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelehemk016/prophet_model-20230527130911.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6wzvw_ug.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z_rtozti.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49992', 'data', 'file=/tmp/tmp7sc_ch5k/6wzvw_ug.json', 'init=/tmp/tmp7sc_ch5k/z_rtozti.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelstulcckf/prophet_model-20230527130912.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/sm1_wcr9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m0ppmsk0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57004', 'data', 'file=/tmp/tmp7sc_ch5k/sm1_wcr9.json', 'init=/tmp/tmp7sc_ch5k/m0ppmsk0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model213y436r/prophet_model-20230527130914.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jd4x48is.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eubnfp70.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79162', 'data', 'file=/tmp/tmp7sc_ch5k/jd4x48is.json', 'init=/tmp/tmp7sc_ch5k/eubnfp70.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelen63m_8a/prophet_model-20230527130915.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xrwaww2q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6dwmn1du.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1075', 'data', 'file=/tmp/tmp7sc_ch5k/xrwaww2q.json', 'init=/tmp/tmp7sc_ch5k/6dwmn1du.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltno9enwm/prophet_model-20230527130916.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zmrc0be9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/79cbxtll.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20202', 'data', 'file=/tmp/tmp7sc_ch5k/zmrc0be9.json', 'init=/tmp/tmp7sc_ch5k/79cbxtll.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltnq2kizc/prophet_model-20230527130917.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1o8alhgm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/liv37axa.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19929', 'data', 'file=/tmp/tmp7sc_ch5k/1o8alhgm.json', 'init=/tmp/tmp7sc_ch5k/liv37axa.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_8z0i0ai/prophet_model-20230527130918.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ma2m0iui.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g3btt7zt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32391', 'data', 'file=/tmp/tmp7sc_ch5k/ma2m0iui.json', 'init=/tmp/tmp7sc_ch5k/g3btt7zt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellhx0o8oy/prophet_model-20230527130918.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mttay_1q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kskic4zp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27796', 'data', 'file=/tmp/tmp7sc_ch5k/mttay_1q.json', 'init=/tmp/tmp7sc_ch5k/kskic4zp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3rr3r6kr/prophet_model-20230527130919.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ok12o3iu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u_v0jh1v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91090', 'data', 'file=/tmp/tmp7sc_ch5k/ok12o3iu.json', 'init=/tmp/tmp7sc_ch5k/u_v0jh1v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgh_bipe6/prophet_model-20230527130920.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hmh7yvm2.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v8q8sua2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87819', 'data', 'file=/tmp/tmp7sc_ch5k/hmh7yvm2.json', 'init=/tmp/tmp7sc_ch5k/v8q8sua2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6t3ytfn1/prophet_model-20230527130921.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ffexr4ea.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mhhikj6p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15605', 'data', 'file=/tmp/tmp7sc_ch5k/ffexr4ea.json', 'init=/tmp/tmp7sc_ch5k/mhhikj6p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7v0pgesm/prophet_model-20230527130922.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t77sng5f.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6r3fnx7m.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8383', 'data', 'file=/tmp/tmp7sc_ch5k/t77sng5f.json', 'init=/tmp/tmp7sc_ch5k/6r3fnx7m.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelu7f_txfx/prophet_model-20230527130923.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xvu9t2ce.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a5ig59q8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57025', 'data', 'file=/tmp/tmp7sc_ch5k/xvu9t2ce.json', 'init=/tmp/tmp7sc_ch5k/a5ig59q8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_xoczct0/prophet_model-20230527130923.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/swv1oy0l.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qkv8u8cn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74416', 'data', 'file=/tmp/tmp7sc_ch5k/swv1oy0l.json', 'init=/tmp/tmp7sc_ch5k/qkv8u8cn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelg24n6uw_/prophet_model-20230527130925.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2mzxw7r9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kolyafjc.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27646', 'data', 'file=/tmp/tmp7sc_ch5k/2mzxw7r9.json', 'init=/tmp/tmp7sc_ch5k/kolyafjc.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelru3rbz2t/prophet_model-20230527130926.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:26 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5bvdurxn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1iu6d12s.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66187', 'data', 'file=/tmp/tmp7sc_ch5k/5bvdurxn.json', 'init=/tmp/tmp7sc_ch5k/1iu6d12s.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwpj7xg5q/prophet_model-20230527130927.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6o8rm0n2.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nvrefuj_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81093', 'data', 'file=/tmp/tmp7sc_ch5k/6o8rm0n2.json', 'init=/tmp/tmp7sc_ch5k/nvrefuj_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelewgh3pi9/prophet_model-20230527130928.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_iznaz7s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z6n24fcb.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26855', 'data', 'file=/tmp/tmp7sc_ch5k/_iznaz7s.json', 'init=/tmp/tmp7sc_ch5k/z6n24fcb.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhpgnlrmq/prophet_model-20230527130930.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9e4nnqhz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cfo1blhk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1300', 'data', 'file=/tmp/tmp7sc_ch5k/9e4nnqhz.json', 'init=/tmp/tmp7sc_ch5k/cfo1blhk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model83zdkiay/prophet_model-20230527130930.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tb1k12re.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gsor0evb.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30804', 'data', 'file=/tmp/tmp7sc_ch5k/tb1k12re.json', 'init=/tmp/tmp7sc_ch5k/gsor0evb.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeldjgrltcd/prophet_model-20230527130932.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4jcn4fpe.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ujl511bx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82263', 'data', 'file=/tmp/tmp7sc_ch5k/4jcn4fpe.json', 'init=/tmp/tmp7sc_ch5k/ujl511bx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4j7707u5/prophet_model-20230527130932.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9djv_l80.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eggyv2an.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79181', 'data', 'file=/tmp/tmp7sc_ch5k/9djv_l80.json', 'init=/tmp/tmp7sc_ch5k/eggyv2an.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_ol7uw3z/prophet_model-20230527130933.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q40uhfip.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ohd1pz5t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8500', 'data', 'file=/tmp/tmp7sc_ch5k/q40uhfip.json', 'init=/tmp/tmp7sc_ch5k/ohd1pz5t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4_upoqhy/prophet_model-20230527130934.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/45icigu7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0rrt32e2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14561', 'data', 'file=/tmp/tmp7sc_ch5k/45icigu7.json', 'init=/tmp/tmp7sc_ch5k/0rrt32e2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_y_qn8fo/prophet_model-20230527130935.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h0ja5k09.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s1r4igk9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70587', 'data', 'file=/tmp/tmp7sc_ch5k/h0ja5k09.json', 'init=/tmp/tmp7sc_ch5k/s1r4igk9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelc7mk_qh2/prophet_model-20230527130935.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ip9434zn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6bwo2t41.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71800', 'data', 'file=/tmp/tmp7sc_ch5k/ip9434zn.json', 'init=/tmp/tmp7sc_ch5k/6bwo2t41.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelw2jfrvnt/prophet_model-20230527130936.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/k4c53e_f.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nw8biu99.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48291', 'data', 'file=/tmp/tmp7sc_ch5k/k4c53e_f.json', 'init=/tmp/tmp7sc_ch5k/nw8biu99.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelffyzpw8z/prophet_model-20230527130937.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8blvrh_0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1sdqvqh4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65295', 'data', 'file=/tmp/tmp7sc_ch5k/8blvrh_0.json', 'init=/tmp/tmp7sc_ch5k/1sdqvqh4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8v_fffiq/prophet_model-20230527130938.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fe4p4yha.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/55u96au8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27614', 'data', 'file=/tmp/tmp7sc_ch5k/fe4p4yha.json', 'init=/tmp/tmp7sc_ch5k/55u96au8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljuen2lbn/prophet_model-20230527130939.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ke97hw29.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/20ydlbl0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9016', 'data', 'file=/tmp/tmp7sc_ch5k/ke97hw29.json', 'init=/tmp/tmp7sc_ch5k/20ydlbl0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelad0uaxg1/prophet_model-20230527130939.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e50v0i2t.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2xiz9edf.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61659', 'data', 'file=/tmp/tmp7sc_ch5k/e50v0i2t.json', 'init=/tmp/tmp7sc_ch5k/2xiz9edf.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelieez1xo1/prophet_model-20230527130940.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pco8ppds.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/554mzijl.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52813', 'data', 'file=/tmp/tmp7sc_ch5k/pco8ppds.json', 'init=/tmp/tmp7sc_ch5k/554mzijl.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkjpnmd6p/prophet_model-20230527130941.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vnwvg7hr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0s3yss1i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9242', 'data', 'file=/tmp/tmp7sc_ch5k/vnwvg7hr.json', 'init=/tmp/tmp7sc_ch5k/0s3yss1i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsw4_n0x4/prophet_model-20230527130943.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ax3j8qfi.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rvcihvzq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79999', 'data', 'file=/tmp/tmp7sc_ch5k/ax3j8qfi.json', 'init=/tmp/tmp7sc_ch5k/rvcihvzq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelk7r_6j99/prophet_model-20230527130944.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ep7i9hdo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/iyo4uadz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55868', 'data', 'file=/tmp/tmp7sc_ch5k/ep7i9hdo.json', 'init=/tmp/tmp7sc_ch5k/iyo4uadz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelc8fv11uo/prophet_model-20230527130945.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8tn9ns1p.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bp8m0ghd.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90529', 'data', 'file=/tmp/tmp7sc_ch5k/8tn9ns1p.json', 'init=/tmp/tmp7sc_ch5k/bp8m0ghd.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelymafb_f8/prophet_model-20230527130946.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a6c93fx4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ic2kjrk7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95626', 'data', 'file=/tmp/tmp7sc_ch5k/a6c93fx4.json', 'init=/tmp/tmp7sc_ch5k/ic2kjrk7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2woy6j1s/prophet_model-20230527130946.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/67fsr8km.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zn7hg_sa.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9058', 'data', 'file=/tmp/tmp7sc_ch5k/67fsr8km.json', 'init=/tmp/tmp7sc_ch5k/zn7hg_sa.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4n1nxscs/prophet_model-20230527130947.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jjux4r6f.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/guu9qy5o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93083', 'data', 'file=/tmp/tmp7sc_ch5k/jjux4r6f.json', 'init=/tmp/tmp7sc_ch5k/guu9qy5o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeldgczbzru/prophet_model-20230527130948.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eo0zwvyo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/61gyojm9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42559', 'data', 'file=/tmp/tmp7sc_ch5k/eo0zwvyo.json', 'init=/tmp/tmp7sc_ch5k/61gyojm9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelo_7b58bh/prophet_model-20230527130949.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/helrkwly.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7sbjalnf.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42864', 'data', 'file=/tmp/tmp7sc_ch5k/helrkwly.json', 'init=/tmp/tmp7sc_ch5k/7sbjalnf.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model267ne1w1/prophet_model-20230527130950.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ux9nvagg.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1hy6nz6i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71666', 'data', 'file=/tmp/tmp7sc_ch5k/ux9nvagg.json', 'init=/tmp/tmp7sc_ch5k/1hy6nz6i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0nubkgpx/prophet_model-20230527130951.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/25cwqxbm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jsof3hpi.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21732', 'data', 'file=/tmp/tmp7sc_ch5k/25cwqxbm.json', 'init=/tmp/tmp7sc_ch5k/jsof3hpi.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeluss1rtit/prophet_model-20230527130951.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/776wcwxx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/keplv6te.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=17153', 'data', 'file=/tmp/tmp7sc_ch5k/776wcwxx.json', 'init=/tmp/tmp7sc_ch5k/keplv6te.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhsbpymiq/prophet_model-20230527130952.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f8g413kp.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6js24_e4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77274', 'data', 'file=/tmp/tmp7sc_ch5k/f8g413kp.json', 'init=/tmp/tmp7sc_ch5k/6js24_e4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwgg39nzo/prophet_model-20230527130953.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ce3opugk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kmeeo3de.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45760', 'data', 'file=/tmp/tmp7sc_ch5k/ce3opugk.json', 'init=/tmp/tmp7sc_ch5k/kmeeo3de.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnqvpulpi/prophet_model-20230527130954.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z6c26o64.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cvvvesr8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53554', 'data', 'file=/tmp/tmp7sc_ch5k/z6c26o64.json', 'init=/tmp/tmp7sc_ch5k/cvvvesr8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model647gjy72/prophet_model-20230527130956.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fw4a8c5u.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fk0i8l9s.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15861', 'data', 'file=/tmp/tmp7sc_ch5k/fw4a8c5u.json', 'init=/tmp/tmp7sc_ch5k/fk0i8l9s.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7hzm78tr/prophet_model-20230527130957.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mzvzgxp7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/icb_d6lg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30133', 'data', 'file=/tmp/tmp7sc_ch5k/mzvzgxp7.json', 'init=/tmp/tmp7sc_ch5k/icb_d6lg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6h_5tbym/prophet_model-20230527130958.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dfdwe3aw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4lpfddgc.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54167', 'data', 'file=/tmp/tmp7sc_ch5k/dfdwe3aw.json', 'init=/tmp/tmp7sc_ch5k/4lpfddgc.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model06rya135/prophet_model-20230527130959.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:09:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:09:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kapm109f.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/thtszwxf.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28991', 'data', 'file=/tmp/tmp7sc_ch5k/kapm109f.json', 'init=/tmp/tmp7sc_ch5k/thtszwxf.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model504a2gog/prophet_model-20230527131000.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/90cagoi5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n6jao2vh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8506', 'data', 'file=/tmp/tmp7sc_ch5k/90cagoi5.json', 'init=/tmp/tmp7sc_ch5k/n6jao2vh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely5486pjl/prophet_model-20230527131001.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4x8ouape.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/am7mug0z.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3008', 'data', 'file=/tmp/tmp7sc_ch5k/4x8ouape.json', 'init=/tmp/tmp7sc_ch5k/am7mug0z.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbzxoo_5g/prophet_model-20230527131001.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bzua2mo1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0325oqvr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50675', 'data', 'file=/tmp/tmp7sc_ch5k/bzua2mo1.json', 'init=/tmp/tmp7sc_ch5k/0325oqvr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8cha92td/prophet_model-20230527131002.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dv97ffyh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/joesl_1v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76463', 'data', 'file=/tmp/tmp7sc_ch5k/dv97ffyh.json', 'init=/tmp/tmp7sc_ch5k/joesl_1v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfx06dtqk/prophet_model-20230527131003.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7gz9f_yp.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0zacsqnm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28773', 'data', 'file=/tmp/tmp7sc_ch5k/7gz9f_yp.json', 'init=/tmp/tmp7sc_ch5k/0zacsqnm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcxcjfzkn/prophet_model-20230527131004.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6rx53_qc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pxzef3c6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84673', 'data', 'file=/tmp/tmp7sc_ch5k/6rx53_qc.json', 'init=/tmp/tmp7sc_ch5k/pxzef3c6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaislnug0/prophet_model-20230527131004.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hv6hxxtn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2e1a0ikg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93627', 'data', 'file=/tmp/tmp7sc_ch5k/hv6hxxtn.json', 'init=/tmp/tmp7sc_ch5k/2e1a0ikg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeleueyej5f/prophet_model-20230527131005.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uqdxcfb0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j3p_btx4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20745', 'data', 'file=/tmp/tmp7sc_ch5k/uqdxcfb0.json', 'init=/tmp/tmp7sc_ch5k/j3p_btx4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpl91w3jd/prophet_model-20230527131006.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tf_j1i47.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rvyixtp_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27912', 'data', 'file=/tmp/tmp7sc_ch5k/tf_j1i47.json', 'init=/tmp/tmp7sc_ch5k/rvyixtp_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsx6t39ik/prophet_model-20230527131007.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hp8lzn50.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8k_easyx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68242', 'data', 'file=/tmp/tmp7sc_ch5k/hp8lzn50.json', 'init=/tmp/tmp7sc_ch5k/8k_easyx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0wjeh3ds/prophet_model-20230527131008.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3_tkmetm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/427bq6n7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91924', 'data', 'file=/tmp/tmp7sc_ch5k/3_tkmetm.json', 'init=/tmp/tmp7sc_ch5k/427bq6n7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4a23151q/prophet_model-20230527131009.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tsugabsq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/o0uaqqqy.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43007', 'data', 'file=/tmp/tmp7sc_ch5k/tsugabsq.json', 'init=/tmp/tmp7sc_ch5k/o0uaqqqy.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model99j72pze/prophet_model-20230527131010.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4ewwn84u.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/djk2y589.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92551', 'data', 'file=/tmp/tmp7sc_ch5k/4ewwn84u.json', 'init=/tmp/tmp7sc_ch5k/djk2y589.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelf2qv9o6y/prophet_model-20230527131011.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gq1c9nja.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jm6_0u8v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52496', 'data', 'file=/tmp/tmp7sc_ch5k/gq1c9nja.json', 'init=/tmp/tmp7sc_ch5k/jm6_0u8v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeld26kncyj/prophet_model-20230527131012.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/anvvpr2z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/iku0twww.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68568', 'data', 'file=/tmp/tmp7sc_ch5k/anvvpr2z.json', 'init=/tmp/tmp7sc_ch5k/iku0twww.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelz6wsco08/prophet_model-20230527131013.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tmzegvaj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v8lxqc3_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59307', 'data', 'file=/tmp/tmp7sc_ch5k/tmzegvaj.json', 'init=/tmp/tmp7sc_ch5k/v8lxqc3_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelct3642ee/prophet_model-20230527131014.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vj516wh8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eg4b8qy9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48055', 'data', 'file=/tmp/tmp7sc_ch5k/vj516wh8.json', 'init=/tmp/tmp7sc_ch5k/eg4b8qy9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfa27ei6x/prophet_model-20230527131015.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pfu6n5rt.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/axh1bgc4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65743', 'data', 'file=/tmp/tmp7sc_ch5k/pfu6n5rt.json', 'init=/tmp/tmp7sc_ch5k/axh1bgc4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpce1xlfz/prophet_model-20230527131015.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l12zmnnv.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_5sc8un8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84538', 'data', 'file=/tmp/tmp7sc_ch5k/l12zmnnv.json', 'init=/tmp/tmp7sc_ch5k/_5sc8un8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modela17h7qj3/prophet_model-20230527131016.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zce9ny61.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wgr7aw4b.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1923', 'data', 'file=/tmp/tmp7sc_ch5k/zce9ny61.json', 'init=/tmp/tmp7sc_ch5k/wgr7aw4b.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfzyg003i/prophet_model-20230527131017.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x_ds6863.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ha27ep5p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81612', 'data', 'file=/tmp/tmp7sc_ch5k/x_ds6863.json', 'init=/tmp/tmp7sc_ch5k/ha27ep5p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0au_rh0c/prophet_model-20230527131018.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vy5b1cel.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9mazmzvo.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55033', 'data', 'file=/tmp/tmp7sc_ch5k/vy5b1cel.json', 'init=/tmp/tmp7sc_ch5k/9mazmzvo.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele833w3pi/prophet_model-20230527131019.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8bb25was.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8wuo67j3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74101', 'data', 'file=/tmp/tmp7sc_ch5k/8bb25was.json', 'init=/tmp/tmp7sc_ch5k/8wuo67j3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljbf_wbuc/prophet_model-20230527131019.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0v7u82t9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y3_9zkly.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85238', 'data', 'file=/tmp/tmp7sc_ch5k/0v7u82t9.json', 'init=/tmp/tmp7sc_ch5k/y3_9zkly.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely269cgwm/prophet_model-20230527131020.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/km3ru0ju.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/abf1zclk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41240', 'data', 'file=/tmp/tmp7sc_ch5k/km3ru0ju.json', 'init=/tmp/tmp7sc_ch5k/abf1zclk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1tcaq862/prophet_model-20230527131021.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qt6corpp.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b4v8wsx0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96341', 'data', 'file=/tmp/tmp7sc_ch5k/qt6corpp.json', 'init=/tmp/tmp7sc_ch5k/b4v8wsx0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellop8_jqj/prophet_model-20230527131022.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/thscj2eh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/oc204o9d.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89439', 'data', 'file=/tmp/tmp7sc_ch5k/thscj2eh.json', 'init=/tmp/tmp7sc_ch5k/oc204o9d.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3qb6ahow/prophet_model-20230527131023.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rxkiri2n.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b_leppol.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=22156', 'data', 'file=/tmp/tmp7sc_ch5k/rxkiri2n.json', 'init=/tmp/tmp7sc_ch5k/b_leppol.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3es4w9og/prophet_model-20230527131025.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f_vqokrz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p58ugxxw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96977', 'data', 'file=/tmp/tmp7sc_ch5k/f_vqokrz.json', 'init=/tmp/tmp7sc_ch5k/p58ugxxw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6cmy9614/prophet_model-20230527131026.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:26 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lde66tnm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pft0mnnv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77573', 'data', 'file=/tmp/tmp7sc_ch5k/lde66tnm.json', 'init=/tmp/tmp7sc_ch5k/pft0mnnv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modela_nom6gv/prophet_model-20230527131027.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fexvgj9y.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rgtolgxr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57619', 'data', 'file=/tmp/tmp7sc_ch5k/fexvgj9y.json', 'init=/tmp/tmp7sc_ch5k/rgtolgxr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeldddzi56j/prophet_model-20230527131028.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h7xti89g.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ia_bxos9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93629', 'data', 'file=/tmp/tmp7sc_ch5k/h7xti89g.json', 'init=/tmp/tmp7sc_ch5k/ia_bxos9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model54636ptw/prophet_model-20230527131028.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s9bo9oog.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/357rvvbn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40624', 'data', 'file=/tmp/tmp7sc_ch5k/s9bo9oog.json', 'init=/tmp/tmp7sc_ch5k/357rvvbn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelo43zsl92/prophet_model-20230527131029.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zguxykyz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bcerz434.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77939', 'data', 'file=/tmp/tmp7sc_ch5k/zguxykyz.json', 'init=/tmp/tmp7sc_ch5k/bcerz434.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljpnl4ukx/prophet_model-20230527131030.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8x68sulk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/syg0_zq3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82552', 'data', 'file=/tmp/tmp7sc_ch5k/8x68sulk.json', 'init=/tmp/tmp7sc_ch5k/syg0_zq3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelirhvbr74/prophet_model-20230527131031.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/knryyzv7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ci38uucm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66036', 'data', 'file=/tmp/tmp7sc_ch5k/knryyzv7.json', 'init=/tmp/tmp7sc_ch5k/ci38uucm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli8dei_w1/prophet_model-20230527131032.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/felmk5ti.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fzoyqp49.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26381', 'data', 'file=/tmp/tmp7sc_ch5k/felmk5ti.json', 'init=/tmp/tmp7sc_ch5k/fzoyqp49.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvnls7qwn/prophet_model-20230527131033.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kqjj_dr0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lsj84pmi.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70697', 'data', 'file=/tmp/tmp7sc_ch5k/kqjj_dr0.json', 'init=/tmp/tmp7sc_ch5k/lsj84pmi.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrsqqikm8/prophet_model-20230527131033.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vngfgy0c.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/42gr20rl.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80750', 'data', 'file=/tmp/tmp7sc_ch5k/vngfgy0c.json', 'init=/tmp/tmp7sc_ch5k/42gr20rl.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhux3qe_u/prophet_model-20230527131034.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/faehgyvc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/33idho2n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26256', 'data', 'file=/tmp/tmp7sc_ch5k/faehgyvc.json', 'init=/tmp/tmp7sc_ch5k/33idho2n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2911x8i9/prophet_model-20230527131035.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/na7ts987.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5nx6l0m1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62931', 'data', 'file=/tmp/tmp7sc_ch5k/na7ts987.json', 'init=/tmp/tmp7sc_ch5k/5nx6l0m1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelyl5lmi5z/prophet_model-20230527131036.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kpcqxh0r.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q7dsws_r.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33917', 'data', 'file=/tmp/tmp7sc_ch5k/kpcqxh0r.json', 'init=/tmp/tmp7sc_ch5k/q7dsws_r.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelun4y_oa1/prophet_model-20230527131037.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a0_e59pt.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b0xupaeu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67113', 'data', 'file=/tmp/tmp7sc_ch5k/a0_e59pt.json', 'init=/tmp/tmp7sc_ch5k/b0xupaeu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8_qhedpc/prophet_model-20230527131038.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cvotx17m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_m8zhtjm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43064', 'data', 'file=/tmp/tmp7sc_ch5k/cvotx17m.json', 'init=/tmp/tmp7sc_ch5k/_m8zhtjm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelruhocjm7/prophet_model-20230527131039.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wzxwjz_a.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bc1k0otg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65198', 'data', 'file=/tmp/tmp7sc_ch5k/wzxwjz_a.json', 'init=/tmp/tmp7sc_ch5k/bc1k0otg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhfucmwf7/prophet_model-20230527131040.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gcij2pki.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_qth5ti5.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53325', 'data', 'file=/tmp/tmp7sc_ch5k/gcij2pki.json', 'init=/tmp/tmp7sc_ch5k/_qth5ti5.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelq1h1zjlu/prophet_model-20230527131041.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v7eiur64.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rwgrjeqr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41127', 'data', 'file=/tmp/tmp7sc_ch5k/v7eiur64.json', 'init=/tmp/tmp7sc_ch5k/rwgrjeqr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsk41hpl7/prophet_model-20230527131042.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t4dp_vua.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z02s_6dp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48682', 'data', 'file=/tmp/tmp7sc_ch5k/t4dp_vua.json', 'init=/tmp/tmp7sc_ch5k/z02s_6dp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8xhm2jlf/prophet_model-20230527131042.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j83ml5c_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s9k7w89m.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5645', 'data', 'file=/tmp/tmp7sc_ch5k/j83ml5c_.json', 'init=/tmp/tmp7sc_ch5k/s9k7w89m.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcwhpvni6/prophet_model-20230527131043.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y8v8upwv.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wqlqefbh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58547', 'data', 'file=/tmp/tmp7sc_ch5k/y8v8upwv.json', 'init=/tmp/tmp7sc_ch5k/wqlqefbh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelogtt_i2j/prophet_model-20230527131044.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4c69fj23.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/38xwwor_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9093', 'data', 'file=/tmp/tmp7sc_ch5k/4c69fj23.json', 'init=/tmp/tmp7sc_ch5k/38xwwor_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpuwcrwdy/prophet_model-20230527131045.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dw_n4hjf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pdyyst02.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43147', 'data', 'file=/tmp/tmp7sc_ch5k/dw_n4hjf.json', 'init=/tmp/tmp7sc_ch5k/pdyyst02.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsuuc1i9w/prophet_model-20230527131045.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5hr9oy_i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/le475qav.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76168', 'data', 'file=/tmp/tmp7sc_ch5k/5hr9oy_i.json', 'init=/tmp/tmp7sc_ch5k/le475qav.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp_c986ui/prophet_model-20230527131046.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9nvl6mxc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m0apyzgx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14683', 'data', 'file=/tmp/tmp7sc_ch5k/9nvl6mxc.json', 'init=/tmp/tmp7sc_ch5k/m0apyzgx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelni9m4bn9/prophet_model-20230527131047.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uwf39lh5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jcgdxc7_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51267', 'data', 'file=/tmp/tmp7sc_ch5k/uwf39lh5.json', 'init=/tmp/tmp7sc_ch5k/jcgdxc7_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrruttubr/prophet_model-20230527131048.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1s18i4mo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r298xm97.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96452', 'data', 'file=/tmp/tmp7sc_ch5k/1s18i4mo.json', 'init=/tmp/tmp7sc_ch5k/r298xm97.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2akoc87f/prophet_model-20230527131049.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7fihp0tr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n7xiv6if.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88361', 'data', 'file=/tmp/tmp7sc_ch5k/7fihp0tr.json', 'init=/tmp/tmp7sc_ch5k/n7xiv6if.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqej8wg_p/prophet_model-20230527131050.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l1ppzasg.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0a_30wmm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78586', 'data', 'file=/tmp/tmp7sc_ch5k/l1ppzasg.json', 'init=/tmp/tmp7sc_ch5k/0a_30wmm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9tephimt/prophet_model-20230527131051.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/onfhghs8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8myroi4e.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83612', 'data', 'file=/tmp/tmp7sc_ch5k/onfhghs8.json', 'init=/tmp/tmp7sc_ch5k/8myroi4e.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4bjz02f5/prophet_model-20230527131052.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z43d9ykf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fvhl1ux8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70306', 'data', 'file=/tmp/tmp7sc_ch5k/z43d9ykf.json', 'init=/tmp/tmp7sc_ch5k/fvhl1ux8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelus_x5v26/prophet_model-20230527131053.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2c1k9tc8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lm70prul.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23743', 'data', 'file=/tmp/tmp7sc_ch5k/2c1k9tc8.json', 'init=/tmp/tmp7sc_ch5k/lm70prul.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele5rq_z66/prophet_model-20230527131054.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/verince9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i9vtdo8n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79024', 'data', 'file=/tmp/tmp7sc_ch5k/verince9.json', 'init=/tmp/tmp7sc_ch5k/i9vtdo8n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqa__ut_z/prophet_model-20230527131055.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g62fe1ef.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/in948r6p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46367', 'data', 'file=/tmp/tmp7sc_ch5k/g62fe1ef.json', 'init=/tmp/tmp7sc_ch5k/in948r6p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgdez8zol/prophet_model-20230527131056.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/svg8_qw5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6rvc1160.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61566', 'data', 'file=/tmp/tmp7sc_ch5k/svg8_qw5.json', 'init=/tmp/tmp7sc_ch5k/6rvc1160.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7kj7dl6s/prophet_model-20230527131057.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pqw967kq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/k5w1bccq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78925', 'data', 'file=/tmp/tmp7sc_ch5k/pqw967kq.json', 'init=/tmp/tmp7sc_ch5k/k5w1bccq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5ymikjo9/prophet_model-20230527131058.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/86krg_h4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h_9fuv90.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9549', 'data', 'file=/tmp/tmp7sc_ch5k/86krg_h4.json', 'init=/tmp/tmp7sc_ch5k/h_9fuv90.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelregooj91/prophet_model-20230527131059.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:10:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yn31uwra.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2s2x7y2k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30899', 'data', 'file=/tmp/tmp7sc_ch5k/yn31uwra.json', 'init=/tmp/tmp7sc_ch5k/2s2x7y2k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelklau80vv/prophet_model-20230527131059.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:10:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kx5go6_i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fijlzqio.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99467', 'data', 'file=/tmp/tmp7sc_ch5k/kx5go6_i.json', 'init=/tmp/tmp7sc_ch5k/fijlzqio.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnqeep1m_/prophet_model-20230527131100.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5vkwf78m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/urpxjsl4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50318', 'data', 'file=/tmp/tmp7sc_ch5k/5vkwf78m.json', 'init=/tmp/tmp7sc_ch5k/urpxjsl4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelprelvqra/prophet_model-20230527131101.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b_rv4tsm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fx2cwnl6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11417', 'data', 'file=/tmp/tmp7sc_ch5k/b_rv4tsm.json', 'init=/tmp/tmp7sc_ch5k/fx2cwnl6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelheequ22e/prophet_model-20230527131102.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t2p0rnm0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/acpc1zre.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64353', 'data', 'file=/tmp/tmp7sc_ch5k/t2p0rnm0.json', 'init=/tmp/tmp7sc_ch5k/acpc1zre.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljnpuhkh9/prophet_model-20230527131103.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f5ils7ec.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6tdc80ei.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34013', 'data', 'file=/tmp/tmp7sc_ch5k/f5ils7ec.json', 'init=/tmp/tmp7sc_ch5k/6tdc80ei.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model50rv4xk4/prophet_model-20230527131104.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/flag40ke.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/efxek1do.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28575', 'data', 'file=/tmp/tmp7sc_ch5k/flag40ke.json', 'init=/tmp/tmp7sc_ch5k/efxek1do.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelnfsf5izk/prophet_model-20230527131105.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/79pudsst.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2pznee0_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71657', 'data', 'file=/tmp/tmp7sc_ch5k/79pudsst.json', 'init=/tmp/tmp7sc_ch5k/2pznee0_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvcr3ys3p/prophet_model-20230527131106.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ygmuun8c.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9kygzvf_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99354', 'data', 'file=/tmp/tmp7sc_ch5k/ygmuun8c.json', 'init=/tmp/tmp7sc_ch5k/9kygzvf_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5u29mvj3/prophet_model-20230527131107.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xz1hkdt6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zav5pztp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15303', 'data', 'file=/tmp/tmp7sc_ch5k/xz1hkdt6.json', 'init=/tmp/tmp7sc_ch5k/zav5pztp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfb1s5n_o/prophet_model-20230527131108.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2g36jpep.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vikmarc_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3909', 'data', 'file=/tmp/tmp7sc_ch5k/2g36jpep.json', 'init=/tmp/tmp7sc_ch5k/vikmarc_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model96hatodj/prophet_model-20230527131109.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/justv7e2.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kurjkekv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43316', 'data', 'file=/tmp/tmp7sc_ch5k/justv7e2.json', 'init=/tmp/tmp7sc_ch5k/kurjkekv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely3p4elin/prophet_model-20230527131110.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a9lfecii.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kqn92_wk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16385', 'data', 'file=/tmp/tmp7sc_ch5k/a9lfecii.json', 'init=/tmp/tmp7sc_ch5k/kqn92_wk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelx2jpoj36/prophet_model-20230527131110.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3olo59t6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g54adji0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62080', 'data', 'file=/tmp/tmp7sc_ch5k/3olo59t6.json', 'init=/tmp/tmp7sc_ch5k/g54adji0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model75h51x49/prophet_model-20230527131111.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hjoe6kd7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/88laktj3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6329', 'data', 'file=/tmp/tmp7sc_ch5k/hjoe6kd7.json', 'init=/tmp/tmp7sc_ch5k/88laktj3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelru_jpi9j/prophet_model-20230527131112.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v13p6vch.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i4t34por.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25573', 'data', 'file=/tmp/tmp7sc_ch5k/v13p6vch.json', 'init=/tmp/tmp7sc_ch5k/i4t34por.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelzhqu1sf6/prophet_model-20230527131113.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vnu8datr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5zc9ohd1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31528', 'data', 'file=/tmp/tmp7sc_ch5k/vnu8datr.json', 'init=/tmp/tmp7sc_ch5k/5zc9ohd1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelf2mwmtsv/prophet_model-20230527131113.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g_iapg1e.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l870n8em.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55741', 'data', 'file=/tmp/tmp7sc_ch5k/g_iapg1e.json', 'init=/tmp/tmp7sc_ch5k/l870n8em.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkmghhhr1/prophet_model-20230527131114.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7hbkel_4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s3h3bv_u.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66811', 'data', 'file=/tmp/tmp7sc_ch5k/7hbkel_4.json', 'init=/tmp/tmp7sc_ch5k/s3h3bv_u.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modell6i5voyy/prophet_model-20230527131115.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_2y13yx0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mga_grj6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23161', 'data', 'file=/tmp/tmp7sc_ch5k/_2y13yx0.json', 'init=/tmp/tmp7sc_ch5k/mga_grj6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwvrdaqxc/prophet_model-20230527131116.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fhmipdod.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ojluhdwx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47410', 'data', 'file=/tmp/tmp7sc_ch5k/fhmipdod.json', 'init=/tmp/tmp7sc_ch5k/ojluhdwx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelseobxuvr/prophet_model-20230527131117.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vynyt8os.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d2uy0hac.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89919', 'data', 'file=/tmp/tmp7sc_ch5k/vynyt8os.json', 'init=/tmp/tmp7sc_ch5k/d2uy0hac.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwzlxivl9/prophet_model-20230527131118.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_v9qm_ro.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tc4qotvq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30470', 'data', 'file=/tmp/tmp7sc_ch5k/_v9qm_ro.json', 'init=/tmp/tmp7sc_ch5k/tc4qotvq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0ai64gd5/prophet_model-20230527131119.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2gzsrx2k.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/em6zhz46.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99359', 'data', 'file=/tmp/tmp7sc_ch5k/2gzsrx2k.json', 'init=/tmp/tmp7sc_ch5k/em6zhz46.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3q_mg1d9/prophet_model-20230527131120.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uo46ustq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/073uwrmm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68311', 'data', 'file=/tmp/tmp7sc_ch5k/uo46ustq.json', 'init=/tmp/tmp7sc_ch5k/073uwrmm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrjj9evhk/prophet_model-20230527131121.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4y05is_3.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_rjjj329.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=39457', 'data', 'file=/tmp/tmp7sc_ch5k/4y05is_3.json', 'init=/tmp/tmp7sc_ch5k/_rjjj329.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbsdek224/prophet_model-20230527131122.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u3jczrk3.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yumm2ot8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97389', 'data', 'file=/tmp/tmp7sc_ch5k/u3jczrk3.json', 'init=/tmp/tmp7sc_ch5k/yumm2ot8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9xaxz6u1/prophet_model-20230527131123.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gjqvuo_5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mlr0wkt4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38956', 'data', 'file=/tmp/tmp7sc_ch5k/gjqvuo_5.json', 'init=/tmp/tmp7sc_ch5k/mlr0wkt4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelzkn7vzuw/prophet_model-20230527131124.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qxthfv2i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h7hz6j6e.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46728', 'data', 'file=/tmp/tmp7sc_ch5k/qxthfv2i.json', 'init=/tmp/tmp7sc_ch5k/h7hz6j6e.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfvpyuuls/prophet_model-20230527131125.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9u63_w9b.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m4dji0gs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47153', 'data', 'file=/tmp/tmp7sc_ch5k/9u63_w9b.json', 'init=/tmp/tmp7sc_ch5k/m4dji0gs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1_8wwcur/prophet_model-20230527131126.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:26 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dtnl6zdh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_p6e79t7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38391', 'data', 'file=/tmp/tmp7sc_ch5k/dtnl6zdh.json', 'init=/tmp/tmp7sc_ch5k/_p6e79t7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model20v2b501/prophet_model-20230527131127.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jcksum7b.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kiek5o8_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11843', 'data', 'file=/tmp/tmp7sc_ch5k/jcksum7b.json', 'init=/tmp/tmp7sc_ch5k/kiek5o8_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7g_9bkij/prophet_model-20230527131128.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dp2bq0qy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4e75yk4d.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65914', 'data', 'file=/tmp/tmp7sc_ch5k/dp2bq0qy.json', 'init=/tmp/tmp7sc_ch5k/4e75yk4d.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelg7j2q2cc/prophet_model-20230527131128.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jb0lp_96.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jtvd41uk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42974', 'data', 'file=/tmp/tmp7sc_ch5k/jb0lp_96.json', 'init=/tmp/tmp7sc_ch5k/jtvd41uk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsbfkpcdg/prophet_model-20230527131129.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2y8eiku7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/267oddul.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15853', 'data', 'file=/tmp/tmp7sc_ch5k/2y8eiku7.json', 'init=/tmp/tmp7sc_ch5k/267oddul.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model75ms52l5/prophet_model-20230527131130.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vlwmv57o.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g7wp_2gv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1660', 'data', 'file=/tmp/tmp7sc_ch5k/vlwmv57o.json', 'init=/tmp/tmp7sc_ch5k/g7wp_2gv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgqz44ggd/prophet_model-20230527131131.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0redb88d.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qjue3g5t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34973', 'data', 'file=/tmp/tmp7sc_ch5k/0redb88d.json', 'init=/tmp/tmp7sc_ch5k/qjue3g5t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model56kkneve/prophet_model-20230527131132.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vz8x21t0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kxtnfafu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24441', 'data', 'file=/tmp/tmp7sc_ch5k/vz8x21t0.json', 'init=/tmp/tmp7sc_ch5k/kxtnfafu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelc6io43uv/prophet_model-20230527131133.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tp74mroz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/puzypcse.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46764', 'data', 'file=/tmp/tmp7sc_ch5k/tp74mroz.json', 'init=/tmp/tmp7sc_ch5k/puzypcse.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfcuhh8e9/prophet_model-20230527131134.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n6j5xzm9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xzu_e8fk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34773', 'data', 'file=/tmp/tmp7sc_ch5k/n6j5xzm9.json', 'init=/tmp/tmp7sc_ch5k/xzu_e8fk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkbjpqg5_/prophet_model-20230527131135.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ylc8xqz6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ckcwx488.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29386', 'data', 'file=/tmp/tmp7sc_ch5k/ylc8xqz6.json', 'init=/tmp/tmp7sc_ch5k/ckcwx488.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7foknjhp/prophet_model-20230527131136.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bmiibx1w.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3el38uyy.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15506', 'data', 'file=/tmp/tmp7sc_ch5k/bmiibx1w.json', 'init=/tmp/tmp7sc_ch5k/3el38uyy.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelk6wjxrp5/prophet_model-20230527131137.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_467hou7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/67y3ow5b.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=969', 'data', 'file=/tmp/tmp7sc_ch5k/_467hou7.json', 'init=/tmp/tmp7sc_ch5k/67y3ow5b.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3w0gfise/prophet_model-20230527131138.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_xzlxujd.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/orizv6l0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66733', 'data', 'file=/tmp/tmp7sc_ch5k/_xzlxujd.json', 'init=/tmp/tmp7sc_ch5k/orizv6l0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9zwasvmi/prophet_model-20230527131139.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y_r77jj6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mlydpwae.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59656', 'data', 'file=/tmp/tmp7sc_ch5k/y_r77jj6.json', 'init=/tmp/tmp7sc_ch5k/mlydpwae.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxsr0fhvv/prophet_model-20230527131140.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2dslwqq7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g6j_13hy.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28966', 'data', 'file=/tmp/tmp7sc_ch5k/2dslwqq7.json', 'init=/tmp/tmp7sc_ch5k/g6j_13hy.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxodgz13k/prophet_model-20230527131140.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tvcxod7k.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/k8pcacn0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63859', 'data', 'file=/tmp/tmp7sc_ch5k/tvcxod7k.json', 'init=/tmp/tmp7sc_ch5k/k8pcacn0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelx7rbn9tw/prophet_model-20230527131141.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pew4tmd3.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/iy1y0gg2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34964', 'data', 'file=/tmp/tmp7sc_ch5k/pew4tmd3.json', 'init=/tmp/tmp7sc_ch5k/iy1y0gg2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxrebau35/prophet_model-20230527131142.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j6429a8o.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qyt6r5_p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85828', 'data', 'file=/tmp/tmp7sc_ch5k/j6429a8o.json', 'init=/tmp/tmp7sc_ch5k/qyt6r5_p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfznthrvn/prophet_model-20230527131143.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h5w43odh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2qjjq865.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52913', 'data', 'file=/tmp/tmp7sc_ch5k/h5w43odh.json', 'init=/tmp/tmp7sc_ch5k/2qjjq865.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpv2zck_z/prophet_model-20230527131144.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wb31wu88.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/51sm4ujf.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45064', 'data', 'file=/tmp/tmp7sc_ch5k/wb31wu88.json', 'init=/tmp/tmp7sc_ch5k/51sm4ujf.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model086dr_li/prophet_model-20230527131145.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8r6bb7e4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_513ehpm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21327', 'data', 'file=/tmp/tmp7sc_ch5k/8r6bb7e4.json', 'init=/tmp/tmp7sc_ch5k/_513ehpm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvckata_1/prophet_model-20230527131145.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r6bn7pk2.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/abkmwfbs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35321', 'data', 'file=/tmp/tmp7sc_ch5k/r6bn7pk2.json', 'init=/tmp/tmp7sc_ch5k/abkmwfbs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp3ru_36e/prophet_model-20230527131146.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nvejpqqn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a5nft8bq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92909', 'data', 'file=/tmp/tmp7sc_ch5k/nvejpqqn.json', 'init=/tmp/tmp7sc_ch5k/a5nft8bq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelx8g8njxo/prophet_model-20230527131148.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qik45g16.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2lrm9qk2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58653', 'data', 'file=/tmp/tmp7sc_ch5k/qik45g16.json', 'init=/tmp/tmp7sc_ch5k/2lrm9qk2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelyj_527kh/prophet_model-20230527131149.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f2zfatdm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aqn0bwpv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49114', 'data', 'file=/tmp/tmp7sc_ch5k/f2zfatdm.json', 'init=/tmp/tmp7sc_ch5k/aqn0bwpv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelny9ocigp/prophet_model-20230527131150.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dzkr_i4_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2_dmty82.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78258', 'data', 'file=/tmp/tmp7sc_ch5k/dzkr_i4_.json', 'init=/tmp/tmp7sc_ch5k/2_dmty82.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrdnczuav/prophet_model-20230527131151.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x_6xunou.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5ttgez24.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46221', 'data', 'file=/tmp/tmp7sc_ch5k/x_6xunou.json', 'init=/tmp/tmp7sc_ch5k/5ttgez24.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9ua_iv3m/prophet_model-20230527131152.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ob60pw4y.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zxhrhqpq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56563', 'data', 'file=/tmp/tmp7sc_ch5k/ob60pw4y.json', 'init=/tmp/tmp7sc_ch5k/zxhrhqpq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3ug2t5p7/prophet_model-20230527131153.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/iqxi1yrj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/foqgzh4b.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98701', 'data', 'file=/tmp/tmp7sc_ch5k/iqxi1yrj.json', 'init=/tmp/tmp7sc_ch5k/foqgzh4b.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelc1ai1xn5/prophet_model-20230527131154.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zseu7xo6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/01_0auoa.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92295', 'data', 'file=/tmp/tmp7sc_ch5k/zseu7xo6.json', 'init=/tmp/tmp7sc_ch5k/01_0auoa.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1vepo0o4/prophet_model-20230527131155.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b9d4_etz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dprg7q6q.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91420', 'data', 'file=/tmp/tmp7sc_ch5k/b9d4_etz.json', 'init=/tmp/tmp7sc_ch5k/dprg7q6q.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljyj53qn0/prophet_model-20230527131156.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/st4ske52.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/48pu0i8a.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20821', 'data', 'file=/tmp/tmp7sc_ch5k/st4ske52.json', 'init=/tmp/tmp7sc_ch5k/48pu0i8a.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1htt_jcu/prophet_model-20230527131157.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uvyxtvq_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zzy5tg_t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41664', 'data', 'file=/tmp/tmp7sc_ch5k/uvyxtvq_.json', 'init=/tmp/tmp7sc_ch5k/zzy5tg_t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelne30yabk/prophet_model-20230527131158.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mu6n_dpj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/butmiom8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91193', 'data', 'file=/tmp/tmp7sc_ch5k/mu6n_dpj.json', 'init=/tmp/tmp7sc_ch5k/butmiom8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqvcwtu48/prophet_model-20230527131159.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:11:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:11:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ra5fw83r.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/orudg3sm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15241', 'data', 'file=/tmp/tmp7sc_ch5k/ra5fw83r.json', 'init=/tmp/tmp7sc_ch5k/orudg3sm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxh8autme/prophet_model-20230527131200.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tk1d6wbr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/46smkk8n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40980', 'data', 'file=/tmp/tmp7sc_ch5k/tk1d6wbr.json', 'init=/tmp/tmp7sc_ch5k/46smkk8n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelisi79ln2/prophet_model-20230527131201.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8f_n4kqq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n9b3bouw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6083', 'data', 'file=/tmp/tmp7sc_ch5k/8f_n4kqq.json', 'init=/tmp/tmp7sc_ch5k/n9b3bouw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaej04p_f/prophet_model-20230527131202.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vm5iiulb.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x7s4xe8i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8878', 'data', 'file=/tmp/tmp7sc_ch5k/vm5iiulb.json', 'init=/tmp/tmp7sc_ch5k/x7s4xe8i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhfajedl5/prophet_model-20230527131203.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_fnj240y.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l8ewsxw2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71760', 'data', 'file=/tmp/tmp7sc_ch5k/_fnj240y.json', 'init=/tmp/tmp7sc_ch5k/l8ewsxw2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelast231o7/prophet_model-20230527131204.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t56jywqw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tanyyrtx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63604', 'data', 'file=/tmp/tmp7sc_ch5k/t56jywqw.json', 'init=/tmp/tmp7sc_ch5k/tanyyrtx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1thpisbz/prophet_model-20230527131205.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uuy0sdxm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ts4g7yrn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23867', 'data', 'file=/tmp/tmp7sc_ch5k/uuy0sdxm.json', 'init=/tmp/tmp7sc_ch5k/ts4g7yrn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsqzwz3lm/prophet_model-20230527131206.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pu1v34pn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gpm22tem.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61620', 'data', 'file=/tmp/tmp7sc_ch5k/pu1v34pn.json', 'init=/tmp/tmp7sc_ch5k/gpm22tem.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelyob44jgn/prophet_model-20230527131207.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7xuvoea9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5tw5jsoz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10579', 'data', 'file=/tmp/tmp7sc_ch5k/7xuvoea9.json', 'init=/tmp/tmp7sc_ch5k/5tw5jsoz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp4z7i0sv/prophet_model-20230527131208.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xncju_6m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yy72tuqj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=17327', 'data', 'file=/tmp/tmp7sc_ch5k/xncju_6m.json', 'init=/tmp/tmp7sc_ch5k/yy72tuqj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelprko504c/prophet_model-20230527131209.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tkplntig.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vdjly4qr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35295', 'data', 'file=/tmp/tmp7sc_ch5k/tkplntig.json', 'init=/tmp/tmp7sc_ch5k/vdjly4qr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelagttvo0l/prophet_model-20230527131210.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ascft4xy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dr5htu3k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18321', 'data', 'file=/tmp/tmp7sc_ch5k/ascft4xy.json', 'init=/tmp/tmp7sc_ch5k/dr5htu3k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model34kn29rg/prophet_model-20230527131210.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ctiabx3y.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cu1dci61.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20002', 'data', 'file=/tmp/tmp7sc_ch5k/ctiabx3y.json', 'init=/tmp/tmp7sc_ch5k/cu1dci61.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeld6g_xz3k/prophet_model-20230527131211.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/80onxtlm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eykwnocl.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50538', 'data', 'file=/tmp/tmp7sc_ch5k/80onxtlm.json', 'init=/tmp/tmp7sc_ch5k/eykwnocl.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeluiy_lhna/prophet_model-20230527131212.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lxqd9ul1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ip__kzrc.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9381', 'data', 'file=/tmp/tmp7sc_ch5k/lxqd9ul1.json', 'init=/tmp/tmp7sc_ch5k/ip__kzrc.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln89pysfk/prophet_model-20230527131213.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4wwuv3fn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/43o6voue.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56850', 'data', 'file=/tmp/tmp7sc_ch5k/4wwuv3fn.json', 'init=/tmp/tmp7sc_ch5k/43o6voue.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model64i_zdta/prophet_model-20230527131214.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w00be7pi.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d64_qol5.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7908', 'data', 'file=/tmp/tmp7sc_ch5k/w00be7pi.json', 'init=/tmp/tmp7sc_ch5k/d64_qol5.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_jj8uda_/prophet_model-20230527131215.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/002ucl9m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qtpc89bi.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54913', 'data', 'file=/tmp/tmp7sc_ch5k/002ucl9m.json', 'init=/tmp/tmp7sc_ch5k/qtpc89bi.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely1e_8_o2/prophet_model-20230527131216.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mtv5588q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p6zdjd8t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84697', 'data', 'file=/tmp/tmp7sc_ch5k/mtv5588q.json', 'init=/tmp/tmp7sc_ch5k/p6zdjd8t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1i48c52m/prophet_model-20230527131217.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dpy3v7kn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b1uyl4a4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15462', 'data', 'file=/tmp/tmp7sc_ch5k/dpy3v7kn.json', 'init=/tmp/tmp7sc_ch5k/b1uyl4a4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model08dm6xd0/prophet_model-20230527131218.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mgprgweu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/grkir4c0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38335', 'data', 'file=/tmp/tmp7sc_ch5k/mgprgweu.json', 'init=/tmp/tmp7sc_ch5k/grkir4c0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqfu3358i/prophet_model-20230527131219.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j3l292js.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gmrbuwz2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38796', 'data', 'file=/tmp/tmp7sc_ch5k/j3l292js.json', 'init=/tmp/tmp7sc_ch5k/gmrbuwz2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcr780m5x/prophet_model-20230527131220.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7gag_vt0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qofqn8u6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75048', 'data', 'file=/tmp/tmp7sc_ch5k/7gag_vt0.json', 'init=/tmp/tmp7sc_ch5k/qofqn8u6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeldsgn5fsy/prophet_model-20230527131221.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ew_xul34.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0k_ivgeb.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49043', 'data', 'file=/tmp/tmp7sc_ch5k/ew_xul34.json', 'init=/tmp/tmp7sc_ch5k/0k_ivgeb.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbq5ujes0/prophet_model-20230527131222.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d7ecd00h.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dulgxj5n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62034', 'data', 'file=/tmp/tmp7sc_ch5k/d7ecd00h.json', 'init=/tmp/tmp7sc_ch5k/dulgxj5n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwx_2gxen/prophet_model-20230527131223.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dhdueik1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h78c9oy3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96169', 'data', 'file=/tmp/tmp7sc_ch5k/dhdueik1.json', 'init=/tmp/tmp7sc_ch5k/h78c9oy3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelt9yg5f97/prophet_model-20230527131224.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3ii6p8j0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p1bez8bh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47362', 'data', 'file=/tmp/tmp7sc_ch5k/3ii6p8j0.json', 'init=/tmp/tmp7sc_ch5k/p1bez8bh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5ay80o9d/prophet_model-20230527131225.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fwelh0my.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0c4ixlaa.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75684', 'data', 'file=/tmp/tmp7sc_ch5k/fwelh0my.json', 'init=/tmp/tmp7sc_ch5k/0c4ixlaa.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli_3seros/prophet_model-20230527131226.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qn7c7gbu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5sknmzaj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9772', 'data', 'file=/tmp/tmp7sc_ch5k/qn7c7gbu.json', 'init=/tmp/tmp7sc_ch5k/5sknmzaj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfcuqtnjp/prophet_model-20230527131227.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z6r8tpwr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pju7xagt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=39047', 'data', 'file=/tmp/tmp7sc_ch5k/z6r8tpwr.json', 'init=/tmp/tmp7sc_ch5k/pju7xagt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli2nna6n_/prophet_model-20230527131228.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qnjj1by7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1lksiy3l.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47829', 'data', 'file=/tmp/tmp7sc_ch5k/qnjj1by7.json', 'init=/tmp/tmp7sc_ch5k/1lksiy3l.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1exgwwz8/prophet_model-20230527131230.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6xrvajhn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2rf91q1z.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1111', 'data', 'file=/tmp/tmp7sc_ch5k/6xrvajhn.json', 'init=/tmp/tmp7sc_ch5k/2rf91q1z.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelosa341jw/prophet_model-20230527131231.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e_ur13a4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1h449c1t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43739', 'data', 'file=/tmp/tmp7sc_ch5k/e_ur13a4.json', 'init=/tmp/tmp7sc_ch5k/1h449c1t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltder25e5/prophet_model-20230527131233.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/in_pknlx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jzsnlsgr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9319', 'data', 'file=/tmp/tmp7sc_ch5k/in_pknlx.json', 'init=/tmp/tmp7sc_ch5k/jzsnlsgr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelw5yrs8gz/prophet_model-20230527131234.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xgeu6ue1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1sbwf3_n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26712', 'data', 'file=/tmp/tmp7sc_ch5k/xgeu6ue1.json', 'init=/tmp/tmp7sc_ch5k/1sbwf3_n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model82of8946/prophet_model-20230527131235.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1d3wu5xl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qo9p5i37.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81642', 'data', 'file=/tmp/tmp7sc_ch5k/1d3wu5xl.json', 'init=/tmp/tmp7sc_ch5k/qo9p5i37.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeluniatai4/prophet_model-20230527131236.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/um1teqhi.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xtymhj8w.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80421', 'data', 'file=/tmp/tmp7sc_ch5k/um1teqhi.json', 'init=/tmp/tmp7sc_ch5k/xtymhj8w.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0_z68a6g/prophet_model-20230527131237.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nh7r3lcx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8nx0_5xs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69560', 'data', 'file=/tmp/tmp7sc_ch5k/nh7r3lcx.json', 'init=/tmp/tmp7sc_ch5k/8nx0_5xs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8velh144/prophet_model-20230527131238.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jhn5atzc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i2xnxbga.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64753', 'data', 'file=/tmp/tmp7sc_ch5k/jhn5atzc.json', 'init=/tmp/tmp7sc_ch5k/i2xnxbga.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelzs45ndgu/prophet_model-20230527131239.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9808uws0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/juz294cc.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81623', 'data', 'file=/tmp/tmp7sc_ch5k/9808uws0.json', 'init=/tmp/tmp7sc_ch5k/juz294cc.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelm4uiken5/prophet_model-20230527131240.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fx303ey7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/le2harkk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5722', 'data', 'file=/tmp/tmp7sc_ch5k/fx303ey7.json', 'init=/tmp/tmp7sc_ch5k/le2harkk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeld5i0rnwh/prophet_model-20230527131240.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8xld0cme.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9g0zqu3q.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49337', 'data', 'file=/tmp/tmp7sc_ch5k/8xld0cme.json', 'init=/tmp/tmp7sc_ch5k/9g0zqu3q.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelj2plqxwu/prophet_model-20230527131241.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/avzwaz0z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xddmh4xs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76940', 'data', 'file=/tmp/tmp7sc_ch5k/avzwaz0z.json', 'init=/tmp/tmp7sc_ch5k/xddmh4xs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0bignln1/prophet_model-20230527131242.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yq9c2vak.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r7bluzlp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38110', 'data', 'file=/tmp/tmp7sc_ch5k/yq9c2vak.json', 'init=/tmp/tmp7sc_ch5k/r7bluzlp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6x8a429b/prophet_model-20230527131244.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rzlw453e.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ucfp8plx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93279', 'data', 'file=/tmp/tmp7sc_ch5k/rzlw453e.json', 'init=/tmp/tmp7sc_ch5k/ucfp8plx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljpaymcsm/prophet_model-20230527131245.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/plse245s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/82cv7i7q.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77820', 'data', 'file=/tmp/tmp7sc_ch5k/plse245s.json', 'init=/tmp/tmp7sc_ch5k/82cv7i7q.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln9cf3r_t/prophet_model-20230527131246.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1fc3nf_s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lumibxys.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30336', 'data', 'file=/tmp/tmp7sc_ch5k/1fc3nf_s.json', 'init=/tmp/tmp7sc_ch5k/lumibxys.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0ul1d3nn/prophet_model-20230527131247.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2c6uh31a.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f0hwqf3z.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86270', 'data', 'file=/tmp/tmp7sc_ch5k/2c6uh31a.json', 'init=/tmp/tmp7sc_ch5k/f0hwqf3z.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelayfruozv/prophet_model-20230527131248.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/24q5en3q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6026fvl_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=17364', 'data', 'file=/tmp/tmp7sc_ch5k/24q5en3q.json', 'init=/tmp/tmp7sc_ch5k/6026fvl_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkw_1i788/prophet_model-20230527131249.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tcktk84_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ybdaokhs.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43031', 'data', 'file=/tmp/tmp7sc_ch5k/tcktk84_.json', 'init=/tmp/tmp7sc_ch5k/ybdaokhs.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgw5kxtn3/prophet_model-20230527131251.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ygapfy9c.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pi8gb4uz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10261', 'data', 'file=/tmp/tmp7sc_ch5k/ygapfy9c.json', 'init=/tmp/tmp7sc_ch5k/pi8gb4uz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbkn3movi/prophet_model-20230527131252.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7decjqnl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/up8iaf_3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94294', 'data', 'file=/tmp/tmp7sc_ch5k/7decjqnl.json', 'init=/tmp/tmp7sc_ch5k/up8iaf_3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelby7xwktb/prophet_model-20230527131253.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yxds3xzc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0sd7_c2i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20215', 'data', 'file=/tmp/tmp7sc_ch5k/yxds3xzc.json', 'init=/tmp/tmp7sc_ch5k/0sd7_c2i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3ztw056l/prophet_model-20230527131254.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jbkpabr0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t1y560bx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52173', 'data', 'file=/tmp/tmp7sc_ch5k/jbkpabr0.json', 'init=/tmp/tmp7sc_ch5k/t1y560bx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6tvwp6mg/prophet_model-20230527131255.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m21lmsr6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/58l_i70p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43880', 'data', 'file=/tmp/tmp7sc_ch5k/m21lmsr6.json', 'init=/tmp/tmp7sc_ch5k/58l_i70p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrg7zp2jx/prophet_model-20230527131255.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eu0a03pw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8g7reurb.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9076', 'data', 'file=/tmp/tmp7sc_ch5k/eu0a03pw.json', 'init=/tmp/tmp7sc_ch5k/8g7reurb.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxwjco87r/prophet_model-20230527131257.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/to8ukvvt.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/sbyzz61n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90799', 'data', 'file=/tmp/tmp7sc_ch5k/to8ukvvt.json', 'init=/tmp/tmp7sc_ch5k/sbyzz61n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0yc2ojgd/prophet_model-20230527131258.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wgm0majf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ty86e0vg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48523', 'data', 'file=/tmp/tmp7sc_ch5k/wgm0majf.json', 'init=/tmp/tmp7sc_ch5k/ty86e0vg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9hfkr9go/prophet_model-20230527131259.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:12:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:12:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1lpw1t93.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t4pillms.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48030', 'data', 'file=/tmp/tmp7sc_ch5k/1lpw1t93.json', 'init=/tmp/tmp7sc_ch5k/t4pillms.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeldi9l6pu5/prophet_model-20230527131300.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b8qbxpxv.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/emvkyqdw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91801', 'data', 'file=/tmp/tmp7sc_ch5k/b8qbxpxv.json', 'init=/tmp/tmp7sc_ch5k/emvkyqdw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelyj9n847g/prophet_model-20230527131301.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i2s180qz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gm8mlxyu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37192', 'data', 'file=/tmp/tmp7sc_ch5k/i2s180qz.json', 'init=/tmp/tmp7sc_ch5k/gm8mlxyu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkalg92b8/prophet_model-20230527131302.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4zlruf2z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xhd7_269.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29405', 'data', 'file=/tmp/tmp7sc_ch5k/4zlruf2z.json', 'init=/tmp/tmp7sc_ch5k/xhd7_269.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwc667zoj/prophet_model-20230527131303.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rasa7qlc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1to_59cn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88230', 'data', 'file=/tmp/tmp7sc_ch5k/rasa7qlc.json', 'init=/tmp/tmp7sc_ch5k/1to_59cn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelti6u3vz6/prophet_model-20230527131304.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8e42eqmb.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5ywu1e66.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68595', 'data', 'file=/tmp/tmp7sc_ch5k/8e42eqmb.json', 'init=/tmp/tmp7sc_ch5k/5ywu1e66.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvxg5aal4/prophet_model-20230527131305.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9ao_90j0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s0navahk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31604', 'data', 'file=/tmp/tmp7sc_ch5k/9ao_90j0.json', 'init=/tmp/tmp7sc_ch5k/s0navahk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelajm204f7/prophet_model-20230527131306.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qupbz9dm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gs4g8tgg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62075', 'data', 'file=/tmp/tmp7sc_ch5k/qupbz9dm.json', 'init=/tmp/tmp7sc_ch5k/gs4g8tgg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5ozvau0k/prophet_model-20230527131307.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/k0npc0qm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yoenqoug.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14019', 'data', 'file=/tmp/tmp7sc_ch5k/k0npc0qm.json', 'init=/tmp/tmp7sc_ch5k/yoenqoug.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelmlciqnt8/prophet_model-20230527131308.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fej_v558.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4vorq0uj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41249', 'data', 'file=/tmp/tmp7sc_ch5k/fej_v558.json', 'init=/tmp/tmp7sc_ch5k/4vorq0uj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelzbf18v7t/prophet_model-20230527131309.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8ojc_8n6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8b7nv6wy.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79708', 'data', 'file=/tmp/tmp7sc_ch5k/8ojc_8n6.json', 'init=/tmp/tmp7sc_ch5k/8b7nv6wy.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhw4qdmbx/prophet_model-20230527131310.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vp00p22v.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0n7ut2yo.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49109', 'data', 'file=/tmp/tmp7sc_ch5k/vp00p22v.json', 'init=/tmp/tmp7sc_ch5k/0n7ut2yo.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgbbcmwfk/prophet_model-20230527131311.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h3l3d1zc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4imko9zc.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13329', 'data', 'file=/tmp/tmp7sc_ch5k/h3l3d1zc.json', 'init=/tmp/tmp7sc_ch5k/4imko9zc.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrmbianen/prophet_model-20230527131312.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tsaa7fjh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bt2h0z47.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48419', 'data', 'file=/tmp/tmp7sc_ch5k/tsaa7fjh.json', 'init=/tmp/tmp7sc_ch5k/bt2h0z47.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxi4mqiqb/prophet_model-20230527131313.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/710qbjjr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rjiuo_up.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34950', 'data', 'file=/tmp/tmp7sc_ch5k/710qbjjr.json', 'init=/tmp/tmp7sc_ch5k/rjiuo_up.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0cwrtii1/prophet_model-20230527131314.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ukdyzl5n.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/21m5sv6i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63506', 'data', 'file=/tmp/tmp7sc_ch5k/ukdyzl5n.json', 'init=/tmp/tmp7sc_ch5k/21m5sv6i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkvypfyr8/prophet_model-20230527131315.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g1j_d9a4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t12vqkny.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67943', 'data', 'file=/tmp/tmp7sc_ch5k/g1j_d9a4.json', 'init=/tmp/tmp7sc_ch5k/t12vqkny.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5wfk3aim/prophet_model-20230527131316.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pl5p3xta.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/crm8d9et.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28733', 'data', 'file=/tmp/tmp7sc_ch5k/pl5p3xta.json', 'init=/tmp/tmp7sc_ch5k/crm8d9et.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeliuf7pvcp/prophet_model-20230527131317.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/i4rk7_zk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xrpljbmj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36166', 'data', 'file=/tmp/tmp7sc_ch5k/i4rk7_zk.json', 'init=/tmp/tmp7sc_ch5k/xrpljbmj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwfnr2o3w/prophet_model-20230527131318.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ns50lju1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bx95v50a.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29083', 'data', 'file=/tmp/tmp7sc_ch5k/ns50lju1.json', 'init=/tmp/tmp7sc_ch5k/bx95v50a.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_ro0fwv_/prophet_model-20230527131319.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t5e5p524.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zoeui2jh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35267', 'data', 'file=/tmp/tmp7sc_ch5k/t5e5p524.json', 'init=/tmp/tmp7sc_ch5k/zoeui2jh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelw1h6nv9h/prophet_model-20230527131319.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/urti17xm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/igewcae8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63520', 'data', 'file=/tmp/tmp7sc_ch5k/urti17xm.json', 'init=/tmp/tmp7sc_ch5k/igewcae8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5xt6vlre/prophet_model-20230527131320.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3gwwqtm6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g__hl8o5.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58523', 'data', 'file=/tmp/tmp7sc_ch5k/3gwwqtm6.json', 'init=/tmp/tmp7sc_ch5k/g__hl8o5.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpy5kscz6/prophet_model-20230527131321.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ewea2xs7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j0ap_235.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89666', 'data', 'file=/tmp/tmp7sc_ch5k/ewea2xs7.json', 'init=/tmp/tmp7sc_ch5k/j0ap_235.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model695fj1i9/prophet_model-20230527131322.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/09bqh_dk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yup25pmk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49421', 'data', 'file=/tmp/tmp7sc_ch5k/09bqh_dk.json', 'init=/tmp/tmp7sc_ch5k/yup25pmk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrxtlvlt5/prophet_model-20230527131323.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aky4txui.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/56rmdg9t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43347', 'data', 'file=/tmp/tmp7sc_ch5k/aky4txui.json', 'init=/tmp/tmp7sc_ch5k/56rmdg9t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_gp937sm/prophet_model-20230527131324.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8dvaycbh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5yyp4sle.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50771', 'data', 'file=/tmp/tmp7sc_ch5k/8dvaycbh.json', 'init=/tmp/tmp7sc_ch5k/5yyp4sle.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrv5052wd/prophet_model-20230527131325.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:26 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1gs0l7z0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xqaba57h.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50331', 'data', 'file=/tmp/tmp7sc_ch5k/1gs0l7z0.json', 'init=/tmp/tmp7sc_ch5k/xqaba57h.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaziu8baf/prophet_model-20230527131326.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_1siyd_a.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jmtcdd4_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76134', 'data', 'file=/tmp/tmp7sc_ch5k/_1siyd_a.json', 'init=/tmp/tmp7sc_ch5k/jmtcdd4_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhwwq1ax1/prophet_model-20230527131328.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ozkvevzd.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7gw3cgaz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65400', 'data', 'file=/tmp/tmp7sc_ch5k/ozkvevzd.json', 'init=/tmp/tmp7sc_ch5k/7gw3cgaz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelshqjxniv/prophet_model-20230527131329.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yi7i_0j4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/spwrn4eq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71573', 'data', 'file=/tmp/tmp7sc_ch5k/yi7i_0j4.json', 'init=/tmp/tmp7sc_ch5k/spwrn4eq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modely0k898d1/prophet_model-20230527131330.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rqc55cxp.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gwh0yok3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45213', 'data', 'file=/tmp/tmp7sc_ch5k/rqc55cxp.json', 'init=/tmp/tmp7sc_ch5k/gwh0yok3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6ofo149p/prophet_model-20230527131331.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/thoru_j4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wpu9qzfx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26290', 'data', 'file=/tmp/tmp7sc_ch5k/thoru_j4.json', 'init=/tmp/tmp7sc_ch5k/wpu9qzfx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelr3wakml2/prophet_model-20230527131331.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/k9b26tih.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/oww_lk7j.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23850', 'data', 'file=/tmp/tmp7sc_ch5k/k9b26tih.json', 'init=/tmp/tmp7sc_ch5k/oww_lk7j.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbmsoalyl/prophet_model-20230527131332.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/okgykqmu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5nvzrgpp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13374', 'data', 'file=/tmp/tmp7sc_ch5k/okgykqmu.json', 'init=/tmp/tmp7sc_ch5k/5nvzrgpp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelw8pos4v9/prophet_model-20230527131334.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aw90epv_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p5eiiu2k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19593', 'data', 'file=/tmp/tmp7sc_ch5k/aw90epv_.json', 'init=/tmp/tmp7sc_ch5k/p5eiiu2k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelerxm9xei/prophet_model-20230527131335.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_yep5ur3.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/uynusnl4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36775', 'data', 'file=/tmp/tmp7sc_ch5k/_yep5ur3.json', 'init=/tmp/tmp7sc_ch5k/uynusnl4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljhd4skra/prophet_model-20230527131335.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6dgwxpqc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mheax5ct.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4717', 'data', 'file=/tmp/tmp7sc_ch5k/6dgwxpqc.json', 'init=/tmp/tmp7sc_ch5k/mheax5ct.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model41x5culx/prophet_model-20230527131336.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0tfl6oj5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mxaxgk33.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14866', 'data', 'file=/tmp/tmp7sc_ch5k/0tfl6oj5.json', 'init=/tmp/tmp7sc_ch5k/mxaxgk33.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxrdqj42_/prophet_model-20230527131337.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:37 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/il6ol7cs.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e_hj5bfm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80101', 'data', 'file=/tmp/tmp7sc_ch5k/il6ol7cs.json', 'init=/tmp/tmp7sc_ch5k/e_hj5bfm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeliderbkey/prophet_model-20230527131338.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/c16ny8ym.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b0ydt427.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=229', 'data', 'file=/tmp/tmp7sc_ch5k/c16ny8ym.json', 'init=/tmp/tmp7sc_ch5k/b0ydt427.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7vuk2_mo/prophet_model-20230527131339.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nfttrkjn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nxxaqejz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20137', 'data', 'file=/tmp/tmp7sc_ch5k/nfttrkjn.json', 'init=/tmp/tmp7sc_ch5k/nxxaqejz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli6hsy4gm/prophet_model-20230527131340.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bvcrnvbo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ejkjd188.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67351', 'data', 'file=/tmp/tmp7sc_ch5k/bvcrnvbo.json', 'init=/tmp/tmp7sc_ch5k/ejkjd188.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4hc607pg/prophet_model-20230527131342.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ttjhy9rr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0s0l8bji.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9736', 'data', 'file=/tmp/tmp7sc_ch5k/ttjhy9rr.json', 'init=/tmp/tmp7sc_ch5k/0s0l8bji.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model_8nmaxbe/prophet_model-20230527131343.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cnu4ce8a.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/285g3abw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53533', 'data', 'file=/tmp/tmp7sc_ch5k/cnu4ce8a.json', 'init=/tmp/tmp7sc_ch5k/285g3abw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvlnnxtee/prophet_model-20230527131343.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4ft6aylm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ufsuwqs_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94237', 'data', 'file=/tmp/tmp7sc_ch5k/4ft6aylm.json', 'init=/tmp/tmp7sc_ch5k/ufsuwqs_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelm5npc2b5/prophet_model-20230527131344.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l8mks972.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mf07blj9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43284', 'data', 'file=/tmp/tmp7sc_ch5k/l8mks972.json', 'init=/tmp/tmp7sc_ch5k/mf07blj9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelhppwfuwr/prophet_model-20230527131345.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6viadls0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zr_eg8tq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43152', 'data', 'file=/tmp/tmp7sc_ch5k/6viadls0.json', 'init=/tmp/tmp7sc_ch5k/zr_eg8tq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0yyimspo/prophet_model-20230527131346.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tn6fii2j.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/16bhe8tg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92077', 'data', 'file=/tmp/tmp7sc_ch5k/tn6fii2j.json', 'init=/tmp/tmp7sc_ch5k/16bhe8tg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8j7pmxel/prophet_model-20230527131347.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h471ub1s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hu6imgle.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72766', 'data', 'file=/tmp/tmp7sc_ch5k/h471ub1s.json', 'init=/tmp/tmp7sc_ch5k/hu6imgle.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3keipo33/prophet_model-20230527131348.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h1yajew_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vqmysr0r.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95271', 'data', 'file=/tmp/tmp7sc_ch5k/h1yajew_.json', 'init=/tmp/tmp7sc_ch5k/vqmysr0r.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeley9if8qj/prophet_model-20230527131349.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/65wwzg63.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nb0ikuy7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93448', 'data', 'file=/tmp/tmp7sc_ch5k/65wwzg63.json', 'init=/tmp/tmp7sc_ch5k/nb0ikuy7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelntg764vc/prophet_model-20230527131350.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ujww9jk7.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/30oheq4k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54304', 'data', 'file=/tmp/tmp7sc_ch5k/ujww9jk7.json', 'init=/tmp/tmp7sc_ch5k/30oheq4k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2iy4txbj/prophet_model-20230527131351.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zoudijkx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cl_jlhaq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28273', 'data', 'file=/tmp/tmp7sc_ch5k/zoudijkx.json', 'init=/tmp/tmp7sc_ch5k/cl_jlhaq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model351ysydz/prophet_model-20230527131352.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7ug4b348.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2dmumken.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45132', 'data', 'file=/tmp/tmp7sc_ch5k/7ug4b348.json', 'init=/tmp/tmp7sc_ch5k/2dmumken.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5t04rpz8/prophet_model-20230527131353.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zozb9z4b.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4_z9rz4a.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64422', 'data', 'file=/tmp/tmp7sc_ch5k/zozb9z4b.json', 'init=/tmp/tmp7sc_ch5k/4_z9rz4a.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9lc5o3jx/prophet_model-20230527131354.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qq_iajv8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gl0urdj6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13929', 'data', 'file=/tmp/tmp7sc_ch5k/qq_iajv8.json', 'init=/tmp/tmp7sc_ch5k/gl0urdj6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8vn4dk3v/prophet_model-20230527131355.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/npoa2oae.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7til6w7h.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66300', 'data', 'file=/tmp/tmp7sc_ch5k/npoa2oae.json', 'init=/tmp/tmp7sc_ch5k/7til6w7h.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeld_e2i8mo/prophet_model-20230527131356.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wz12kse3.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dem5f3z0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84142', 'data', 'file=/tmp/tmp7sc_ch5k/wz12kse3.json', 'init=/tmp/tmp7sc_ch5k/dem5f3z0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8te18wg4/prophet_model-20230527131357.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jc8vz7q8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x84c9b_p.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54073', 'data', 'file=/tmp/tmp7sc_ch5k/jc8vz7q8.json', 'init=/tmp/tmp7sc_ch5k/x84c9b_p.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbk0fz98g/prophet_model-20230527131358.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kdsswabm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ofmk2gy6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32035', 'data', 'file=/tmp/tmp7sc_ch5k/kdsswabm.json', 'init=/tmp/tmp7sc_ch5k/ofmk2gy6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxy3xgk0d/prophet_model-20230527131359.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:13:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/69svmw0i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ch2pjvoi.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50659', 'data', 'file=/tmp/tmp7sc_ch5k/69svmw0i.json', 'init=/tmp/tmp7sc_ch5k/ch2pjvoi.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpah54u4t/prophet_model-20230527131359.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:13:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yjb6bq4z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qyrusj0u.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90343', 'data', 'file=/tmp/tmp7sc_ch5k/yjb6bq4z.json', 'init=/tmp/tmp7sc_ch5k/qyrusj0u.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0wqf3vy2/prophet_model-20230527131400.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l95gz4ks.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8t307_iw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25753', 'data', 'file=/tmp/tmp7sc_ch5k/l95gz4ks.json', 'init=/tmp/tmp7sc_ch5k/8t307_iw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelquc_i55s/prophet_model-20230527131401.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6o2urfht.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1w_f7h46.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56101', 'data', 'file=/tmp/tmp7sc_ch5k/6o2urfht.json', 'init=/tmp/tmp7sc_ch5k/1w_f7h46.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelxoarpory/prophet_model-20230527131402.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p24h0r0v.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vgc2q0_2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1546', 'data', 'file=/tmp/tmp7sc_ch5k/p24h0r0v.json', 'init=/tmp/tmp7sc_ch5k/vgc2q0_2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfhfnr8fu/prophet_model-20230527131403.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zl3fm5pl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/c0mri2uq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56708', 'data', 'file=/tmp/tmp7sc_ch5k/zl3fm5pl.json', 'init=/tmp/tmp7sc_ch5k/c0mri2uq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3gj45ww8/prophet_model-20230527131404.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yg_9pulj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e79icxzv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86547', 'data', 'file=/tmp/tmp7sc_ch5k/yg_9pulj.json', 'init=/tmp/tmp7sc_ch5k/e79icxzv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0fb_poux/prophet_model-20230527131405.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:05 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rx4necrs.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6xims4o_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10362', 'data', 'file=/tmp/tmp7sc_ch5k/rx4necrs.json', 'init=/tmp/tmp7sc_ch5k/6xims4o_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelkdxqiei7/prophet_model-20230527131406.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:06 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v_zqeioz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dclhvdiv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51545', 'data', 'file=/tmp/tmp7sc_ch5k/v_zqeioz.json', 'init=/tmp/tmp7sc_ch5k/dclhvdiv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltft060ix/prophet_model-20230527131407.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cs4dk5gd.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dbbm348e.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29679', 'data', 'file=/tmp/tmp7sc_ch5k/cs4dk5gd.json', 'init=/tmp/tmp7sc_ch5k/dbbm348e.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modela91gunah/prophet_model-20230527131408.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2qyctm2w.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pi1rj32x.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76371', 'data', 'file=/tmp/tmp7sc_ch5k/2qyctm2w.json', 'init=/tmp/tmp7sc_ch5k/pi1rj32x.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelssa7dta2/prophet_model-20230527131409.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wxw7kn2q.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/2bj2xqv8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48354', 'data', 'file=/tmp/tmp7sc_ch5k/wxw7kn2q.json', 'init=/tmp/tmp7sc_ch5k/2bj2xqv8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3ejj7dxv/prophet_model-20230527131410.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/atqo68_0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9chfg97g.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41246', 'data', 'file=/tmp/tmp7sc_ch5k/atqo68_0.json', 'init=/tmp/tmp7sc_ch5k/9chfg97g.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeleysurxbg/prophet_model-20230527131411.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f9maysb8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/31b9y1ek.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85212', 'data', 'file=/tmp/tmp7sc_ch5k/f9maysb8.json', 'init=/tmp/tmp7sc_ch5k/31b9y1ek.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5qdandvg/prophet_model-20230527131412.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nby7cqg0.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w7ge384l.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92225', 'data', 'file=/tmp/tmp7sc_ch5k/nby7cqg0.json', 'init=/tmp/tmp7sc_ch5k/w7ge384l.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelo2eotuur/prophet_model-20230527131413.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d1fdjpbn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kpj1t7fy.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71935', 'data', 'file=/tmp/tmp7sc_ch5k/d1fdjpbn.json', 'init=/tmp/tmp7sc_ch5k/kpj1t7fy.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqiav99p2/prophet_model-20230527131414.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s7wxo37l.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bojc24rj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64591', 'data', 'file=/tmp/tmp7sc_ch5k/s7wxo37l.json', 'init=/tmp/tmp7sc_ch5k/bojc24rj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model05ovt0il/prophet_model-20230527131414.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6hqeeu40.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_lv6py0_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32017', 'data', 'file=/tmp/tmp7sc_ch5k/6hqeeu40.json', 'init=/tmp/tmp7sc_ch5k/_lv6py0_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsd986hw3/prophet_model-20230527131415.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qmzkid74.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rc48qr_v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33505', 'data', 'file=/tmp/tmp7sc_ch5k/qmzkid74.json', 'init=/tmp/tmp7sc_ch5k/rc48qr_v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvujpf_ls/prophet_model-20230527131416.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xfjars1x.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j3oy1moq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71366', 'data', 'file=/tmp/tmp7sc_ch5k/xfjars1x.json', 'init=/tmp/tmp7sc_ch5k/j3oy1moq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model58uxkzcw/prophet_model-20230527131417.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:17 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4js0z3jf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8cgyl0dk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76467', 'data', 'file=/tmp/tmp7sc_ch5k/4js0z3jf.json', 'init=/tmp/tmp7sc_ch5k/8cgyl0dk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfqm0wnab/prophet_model-20230527131418.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1vfk55h9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xssgqm68.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98232', 'data', 'file=/tmp/tmp7sc_ch5k/1vfk55h9.json', 'init=/tmp/tmp7sc_ch5k/xssgqm68.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelv3u2payl/prophet_model-20230527131418.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:19 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bn3nn207.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9l0uz4ky.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38870', 'data', 'file=/tmp/tmp7sc_ch5k/bn3nn207.json', 'init=/tmp/tmp7sc_ch5k/9l0uz4ky.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model20gouha5/prophet_model-20230527131419.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_e9kv88u.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ysg47083.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62926', 'data', 'file=/tmp/tmp7sc_ch5k/_e9kv88u.json', 'init=/tmp/tmp7sc_ch5k/ysg47083.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelije0ymkc/prophet_model-20230527131420.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fzm917vf.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5uf7v_cr.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68427', 'data', 'file=/tmp/tmp7sc_ch5k/fzm917vf.json', 'init=/tmp/tmp7sc_ch5k/5uf7v_cr.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4mmnn6jr/prophet_model-20230527131421.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pjkqmoak.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mkdfj_sw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43082', 'data', 'file=/tmp/tmp7sc_ch5k/pjkqmoak.json', 'init=/tmp/tmp7sc_ch5k/mkdfj_sw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgo0tnito/prophet_model-20230527131422.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dy1i6not.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v1pd4nt9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=469', 'data', 'file=/tmp/tmp7sc_ch5k/dy1i6not.json', 'init=/tmp/tmp7sc_ch5k/v1pd4nt9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeluwu_aqhs/prophet_model-20230527131423.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5yp12cu8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qgprb_ha.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33686', 'data', 'file=/tmp/tmp7sc_ch5k/5yp12cu8.json', 'init=/tmp/tmp7sc_ch5k/qgprb_ha.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9fx2qxf2/prophet_model-20230527131424.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/re5r9s53.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zdci66of.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97277', 'data', 'file=/tmp/tmp7sc_ch5k/re5r9s53.json', 'init=/tmp/tmp7sc_ch5k/zdci66of.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeluar0adkx/prophet_model-20230527131425.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/l5ecyo0s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w41zqm0b.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24638', 'data', 'file=/tmp/tmp7sc_ch5k/l5ecyo0s.json', 'init=/tmp/tmp7sc_ch5k/w41zqm0b.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcxln1n8n/prophet_model-20230527131426.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j53py6cl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hc24d54r.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37736', 'data', 'file=/tmp/tmp7sc_ch5k/j53py6cl.json', 'init=/tmp/tmp7sc_ch5k/hc24d54r.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0zfxz99e/prophet_model-20230527131427.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fo_k4z8v.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/kfs7yku8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25102', 'data', 'file=/tmp/tmp7sc_ch5k/fo_k4z8v.json', 'init=/tmp/tmp7sc_ch5k/kfs7yku8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelywvjhn1f/prophet_model-20230527131428.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hxw7iejz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cim4pg9y.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98844', 'data', 'file=/tmp/tmp7sc_ch5k/hxw7iejz.json', 'init=/tmp/tmp7sc_ch5k/cim4pg9y.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9trt81e5/prophet_model-20230527131429.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0v5x96hy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lyl1khb4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88519', 'data', 'file=/tmp/tmp7sc_ch5k/0v5x96hy.json', 'init=/tmp/tmp7sc_ch5k/lyl1khb4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9oqfyb0d/prophet_model-20230527131430.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m0t8g2k4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/55yu3858.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27509', 'data', 'file=/tmp/tmp7sc_ch5k/m0t8g2k4.json', 'init=/tmp/tmp7sc_ch5k/55yu3858.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpgflsmen/prophet_model-20230527131431.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:31 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/110vifrk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s83qlksm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50320', 'data', 'file=/tmp/tmp7sc_ch5k/110vifrk.json', 'init=/tmp/tmp7sc_ch5k/s83qlksm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeliht2rvel/prophet_model-20230527131432.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pjis4b8s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_292_pra.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48845', 'data', 'file=/tmp/tmp7sc_ch5k/pjis4b8s.json', 'init=/tmp/tmp7sc_ch5k/_292_pra.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelj774zole/prophet_model-20230527131432.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5s8puunm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rtqg9g5y.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33135', 'data', 'file=/tmp/tmp7sc_ch5k/5s8puunm.json', 'init=/tmp/tmp7sc_ch5k/rtqg9g5y.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelr2vhoidf/prophet_model-20230527131433.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r95z18lq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/3a8d4qvn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12146', 'data', 'file=/tmp/tmp7sc_ch5k/r95z18lq.json', 'init=/tmp/tmp7sc_ch5k/3a8d4qvn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelmn1rrb3c/prophet_model-20230527131434.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/327o2ff5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rq05zryl.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61591', 'data', 'file=/tmp/tmp7sc_ch5k/327o2ff5.json', 'init=/tmp/tmp7sc_ch5k/rq05zryl.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltog5bt7s/prophet_model-20230527131435.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m6ny18k5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/chab6_jk.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99987', 'data', 'file=/tmp/tmp7sc_ch5k/m6ny18k5.json', 'init=/tmp/tmp7sc_ch5k/chab6_jk.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcf7n8xuw/prophet_model-20230527131436.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/evta8z7z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/sykazilw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3376', 'data', 'file=/tmp/tmp7sc_ch5k/evta8z7z.json', 'init=/tmp/tmp7sc_ch5k/sykazilw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4yk90i0y/prophet_model-20230527131438.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xrrzpqhm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/szjwc35f.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83712', 'data', 'file=/tmp/tmp7sc_ch5k/xrrzpqhm.json', 'init=/tmp/tmp7sc_ch5k/szjwc35f.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelyj9l5w8l/prophet_model-20230527131439.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_r_5gzuv.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j444npjq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40464', 'data', 'file=/tmp/tmp7sc_ch5k/_r_5gzuv.json', 'init=/tmp/tmp7sc_ch5k/j444npjq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelx4p_deva/prophet_model-20230527131440.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v2qnyp3j.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bduh_b1e.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91109', 'data', 'file=/tmp/tmp7sc_ch5k/v2qnyp3j.json', 'init=/tmp/tmp7sc_ch5k/bduh_b1e.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellb0ba8gx/prophet_model-20230527131441.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zg8mpmrx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p6ng8v4b.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1692', 'data', 'file=/tmp/tmp7sc_ch5k/zg8mpmrx.json', 'init=/tmp/tmp7sc_ch5k/p6ng8v4b.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2yrwpm7z/prophet_model-20230527131442.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/966feph2.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tsynjty3.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51226', 'data', 'file=/tmp/tmp7sc_ch5k/966feph2.json', 'init=/tmp/tmp7sc_ch5k/tsynjty3.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelornlbqt9/prophet_model-20230527131442.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q3rx4ak8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8s6xkanm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20286', 'data', 'file=/tmp/tmp7sc_ch5k/q3rx4ak8.json', 'init=/tmp/tmp7sc_ch5k/8s6xkanm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modell_suafe7/prophet_model-20230527131443.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b7v6t6vw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6ivv13nb.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69221', 'data', 'file=/tmp/tmp7sc_ch5k/b7v6t6vw.json', 'init=/tmp/tmp7sc_ch5k/6ivv13nb.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2d34bzq_/prophet_model-20230527131444.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hniorp0m.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e1evbq4v.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86936', 'data', 'file=/tmp/tmp7sc_ch5k/hniorp0m.json', 'init=/tmp/tmp7sc_ch5k/e1evbq4v.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelclbnqgsr/prophet_model-20230527131445.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w_jrtr1e.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/yyts8axj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4389', 'data', 'file=/tmp/tmp7sc_ch5k/w_jrtr1e.json', 'init=/tmp/tmp7sc_ch5k/yyts8axj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljk7j_1v_/prophet_model-20230527131446.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:46 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/f0eat53x.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5whvybhp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73669', 'data', 'file=/tmp/tmp7sc_ch5k/f0eat53x.json', 'init=/tmp/tmp7sc_ch5k/5whvybhp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7i1mpumf/prophet_model-20230527131447.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_utun5we.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_916s9j2.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72980', 'data', 'file=/tmp/tmp7sc_ch5k/_utun5we.json', 'init=/tmp/tmp7sc_ch5k/_916s9j2.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelougvcll3/prophet_model-20230527131448.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/eulmp287.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9sfdfsib.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40838', 'data', 'file=/tmp/tmp7sc_ch5k/eulmp287.json', 'init=/tmp/tmp7sc_ch5k/9sfdfsib.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelmob1z2w7/prophet_model-20230527131449.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:49 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qztnz2fz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ato8kv2m.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58111', 'data', 'file=/tmp/tmp7sc_ch5k/qztnz2fz.json', 'init=/tmp/tmp7sc_ch5k/ato8kv2m.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln75djdei/prophet_model-20230527131450.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6jfb65mr.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xjxt7ubq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82200', 'data', 'file=/tmp/tmp7sc_ch5k/6jfb65mr.json', 'init=/tmp/tmp7sc_ch5k/xjxt7ubq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelo_b5a_ok/prophet_model-20230527131451.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d8n7dq56.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b49ud1bg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42869', 'data', 'file=/tmp/tmp7sc_ch5k/d8n7dq56.json', 'init=/tmp/tmp7sc_ch5k/b49ud1bg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6pihk3vz/prophet_model-20230527131453.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/75znz4lh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nrkm8c2i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4880', 'data', 'file=/tmp/tmp7sc_ch5k/75znz4lh.json', 'init=/tmp/tmp7sc_ch5k/nrkm8c2i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelukb98xsx/prophet_model-20230527131454.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d6xphats.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r3j3mg7e.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78401', 'data', 'file=/tmp/tmp7sc_ch5k/d6xphats.json', 'init=/tmp/tmp7sc_ch5k/r3j3mg7e.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwtssi9dt/prophet_model-20230527131454.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a41kr_7z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/o2sixgac.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3536', 'data', 'file=/tmp/tmp7sc_ch5k/a41kr_7z.json', 'init=/tmp/tmp7sc_ch5k/o2sixgac.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0hzyf88e/prophet_model-20230527131455.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zt2sh_nl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5yk168q_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47387', 'data', 'file=/tmp/tmp7sc_ch5k/zt2sh_nl.json', 'init=/tmp/tmp7sc_ch5k/5yk168q_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model38f4x60w/prophet_model-20230527131456.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_2t_47uk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1re0oqmg.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63883', 'data', 'file=/tmp/tmp7sc_ch5k/_2t_47uk.json', 'init=/tmp/tmp7sc_ch5k/1re0oqmg.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelt6fqlw_x/prophet_model-20230527131457.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s88lof56.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x3jz9ip0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62697', 'data', 'file=/tmp/tmp7sc_ch5k/s88lof56.json', 'init=/tmp/tmp7sc_ch5k/x3jz9ip0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsgr_kjij/prophet_model-20230527131458.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:58 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rgm_ko_9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/debcnjyh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63323', 'data', 'file=/tmp/tmp7sc_ch5k/rgm_ko_9.json', 'init=/tmp/tmp7sc_ch5k/debcnjyh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcxh2tyxv/prophet_model-20230527131459.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:14:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:14:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w4qjwwsm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vxt8qmh1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46342', 'data', 'file=/tmp/tmp7sc_ch5k/w4qjwwsm.json', 'init=/tmp/tmp7sc_ch5k/vxt8qmh1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelq0inkx4i/prophet_model-20230527131500.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/w0lul89v.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ozhqrf68.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54297', 'data', 'file=/tmp/tmp7sc_ch5k/w0lul89v.json', 'init=/tmp/tmp7sc_ch5k/ozhqrf68.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modele77a3ez6/prophet_model-20230527131501.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ws8edueu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qbhmyrgh.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56629', 'data', 'file=/tmp/tmp7sc_ch5k/ws8edueu.json', 'init=/tmp/tmp7sc_ch5k/qbhmyrgh.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6dpomnug/prophet_model-20230527131502.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qpocv8qm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lfv3uoji.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19698', 'data', 'file=/tmp/tmp7sc_ch5k/qpocv8qm.json', 'init=/tmp/tmp7sc_ch5k/lfv3uoji.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9c_p4lyi/prophet_model-20230527131503.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z5sx6qzw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/oc9ua0cu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52083', 'data', 'file=/tmp/tmp7sc_ch5k/z5sx6qzw.json', 'init=/tmp/tmp7sc_ch5k/oc9ua0cu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelv3cmjq4u/prophet_model-20230527131504.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8ft9lvj5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zse2p3kx.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4389', 'data', 'file=/tmp/tmp7sc_ch5k/8ft9lvj5.json', 'init=/tmp/tmp7sc_ch5k/zse2p3kx.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9ec5kvi1/prophet_model-20230527131505.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:05 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:06 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j5kp55ez.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/vgfzr2k9.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6451', 'data', 'file=/tmp/tmp7sc_ch5k/j5kp55ez.json', 'init=/tmp/tmp7sc_ch5k/vgfzr2k9.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelapu3h64a/prophet_model-20230527131506.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:07 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ihj6wl_y.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fc5alcbq.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51146', 'data', 'file=/tmp/tmp7sc_ch5k/ihj6wl_y.json', 'init=/tmp/tmp7sc_ch5k/fc5alcbq.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model9hw9m0hi/prophet_model-20230527131507.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:07 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:08 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/if1y4ozo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wbd_ro2t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1141', 'data', 'file=/tmp/tmp7sc_ch5k/if1y4ozo.json', 'init=/tmp/tmp7sc_ch5k/wbd_ro2t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelrai9kt84/prophet_model-20230527131508.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:08 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:09 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/avqedcqc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/8djircby.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7528', 'data', 'file=/tmp/tmp7sc_ch5k/avqedcqc.json', 'init=/tmp/tmp7sc_ch5k/8djircby.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpm42owqb/prophet_model-20230527131509.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:09 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/d7gtodv8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/95h61oj_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=22380', 'data', 'file=/tmp/tmp7sc_ch5k/d7gtodv8.json', 'init=/tmp/tmp7sc_ch5k/95h61oj_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelke86k3c_/prophet_model-20230527131510.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:10 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:10 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ei0cekji.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/wdmqyixu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32554', 'data', 'file=/tmp/tmp7sc_ch5k/ei0cekji.json', 'init=/tmp/tmp7sc_ch5k/wdmqyixu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelub7joul8/prophet_model-20230527131511.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:11 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:11 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y7gji9h8.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9ssszijz.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89527', 'data', 'file=/tmp/tmp7sc_ch5k/y7gji9h8.json', 'init=/tmp/tmp7sc_ch5k/9ssszijz.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelksm4_sjo/prophet_model-20230527131512.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:12 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:12 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xrtv7a66.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/t71k6d6o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98629', 'data', 'file=/tmp/tmp7sc_ch5k/xrtv7a66.json', 'init=/tmp/tmp7sc_ch5k/t71k6d6o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model2atfn958/prophet_model-20230527131513.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:13 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:13 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q40pwr_j.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u1wwnylj.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20748', 'data', 'file=/tmp/tmp7sc_ch5k/q40pwr_j.json', 'init=/tmp/tmp7sc_ch5k/u1wwnylj.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model1lb5pu55/prophet_model-20230527131514.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:14 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:14 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hbxk66cj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/4j2cc47_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90759', 'data', 'file=/tmp/tmp7sc_ch5k/hbxk66cj.json', 'init=/tmp/tmp7sc_ch5k/4j2cc47_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0tpnohzl/prophet_model-20230527131515.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:15 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6dykpehz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/28s3042k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53080', 'data', 'file=/tmp/tmp7sc_ch5k/6dykpehz.json', 'init=/tmp/tmp7sc_ch5k/28s3042k.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpean5rkv/prophet_model-20230527131515.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:15 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:16 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m57jwnmq.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/74jdo54i.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7749', 'data', 'file=/tmp/tmp7sc_ch5k/m57jwnmq.json', 'init=/tmp/tmp7sc_ch5k/74jdo54i.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli21q23e_/prophet_model-20230527131516.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:16 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:17 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n56iahrw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/adexv0ta.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48102', 'data', 'file=/tmp/tmp7sc_ch5k/n56iahrw.json', 'init=/tmp/tmp7sc_ch5k/adexv0ta.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli41l68br/prophet_model-20230527131518.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:18 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:18 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gjnr64fj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bwh4172h.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19438', 'data', 'file=/tmp/tmp7sc_ch5k/gjnr64fj.json', 'init=/tmp/tmp7sc_ch5k/bwh4172h.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelbs3es7xy/prophet_model-20230527131519.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:19 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:20 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/0uwj6s6z.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xqigl7i1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73896', 'data', 'file=/tmp/tmp7sc_ch5k/0uwj6s6z.json', 'init=/tmp/tmp7sc_ch5k/xqigl7i1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvrdbhr9f/prophet_model-20230527131520.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:20 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/64lkr2mh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bgt9glp7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83286', 'data', 'file=/tmp/tmp7sc_ch5k/64lkr2mh.json', 'init=/tmp/tmp7sc_ch5k/bgt9glp7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelity73vf9/prophet_model-20230527131521.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:21 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lg8ll9kw.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/tn08cl8h.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77200', 'data', 'file=/tmp/tmp7sc_ch5k/lg8ll9kw.json', 'init=/tmp/tmp7sc_ch5k/tn08cl8h.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model0u5i05x4/prophet_model-20230527131522.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:22 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:22 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xbet2c_h.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/aaaa44_7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77001', 'data', 'file=/tmp/tmp7sc_ch5k/xbet2c_h.json', 'init=/tmp/tmp7sc_ch5k/aaaa44_7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelk2n41v8_/prophet_model-20230527131523.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:23 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:23 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/to_prx_i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/svow3dw8.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42230', 'data', 'file=/tmp/tmp7sc_ch5k/to_prx_i.json', 'init=/tmp/tmp7sc_ch5k/svow3dw8.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model4ytqo91z/prophet_model-20230527131524.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:24 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jpufkuhj.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9s1xr8ee.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29819', 'data', 'file=/tmp/tmp7sc_ch5k/jpufkuhj.json', 'init=/tmp/tmp7sc_ch5k/9s1xr8ee.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqazrn57y/prophet_model-20230527131525.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:25 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:25 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ob5rxzps.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/pq83xeu7.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99776', 'data', 'file=/tmp/tmp7sc_ch5k/ob5rxzps.json', 'init=/tmp/tmp7sc_ch5k/pq83xeu7.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp8__3gup/prophet_model-20230527131526.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:26 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:26 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/by8cn4q5.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xltavc4o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58967', 'data', 'file=/tmp/tmp7sc_ch5k/by8cn4q5.json', 'init=/tmp/tmp7sc_ch5k/xltavc4o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelndb0opeb/prophet_model-20230527131527.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:27 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6ljkw5bb.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/m2wrapsm.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21224', 'data', 'file=/tmp/tmp7sc_ch5k/6ljkw5bb.json', 'init=/tmp/tmp7sc_ch5k/m2wrapsm.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaecd5to5/prophet_model-20230527131527.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:27 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:28 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/omu4hcuy.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q3jnr8kv.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64720', 'data', 'file=/tmp/tmp7sc_ch5k/omu4hcuy.json', 'init=/tmp/tmp7sc_ch5k/q3jnr8kv.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelqpi2vmdo/prophet_model-20230527131528.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:28 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:29 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/54ml95n4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s4bwe9la.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70937', 'data', 'file=/tmp/tmp7sc_ch5k/54ml95n4.json', 'init=/tmp/tmp7sc_ch5k/s4bwe9la.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln04igw0t/prophet_model-20230527131529.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:29 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:30 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/dd4xge67.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/q0qd101z.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61201', 'data', 'file=/tmp/tmp7sc_ch5k/dd4xge67.json', 'init=/tmp/tmp7sc_ch5k/q0qd101z.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7e7il9a7/prophet_model-20230527131530.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:30 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:31 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7zhwa9qa.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/suxowavn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96762', 'data', 'file=/tmp/tmp7sc_ch5k/7zhwa9qa.json', 'init=/tmp/tmp7sc_ch5k/suxowavn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelfact46zf/prophet_model-20230527131532.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:32 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:32 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/n364myrl.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/p094l2wd.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47528', 'data', 'file=/tmp/tmp7sc_ch5k/n364myrl.json', 'init=/tmp/tmp7sc_ch5k/p094l2wd.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6lgzsl4o/prophet_model-20230527131533.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:33 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:33 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cham_b1n.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/umoc2eva.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72531', 'data', 'file=/tmp/tmp7sc_ch5k/cham_b1n.json', 'init=/tmp/tmp7sc_ch5k/umoc2eva.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelvvjq3tv6/prophet_model-20230527131534.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:34 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:34 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/1j2our54.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/98c0yk09.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67871', 'data', 'file=/tmp/tmp7sc_ch5k/1j2our54.json', 'init=/tmp/tmp7sc_ch5k/98c0yk09.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelpqepv71a/prophet_model-20230527131535.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:35 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:35 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/utn86xpu.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/63q4ibqn.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47463', 'data', 'file=/tmp/tmp7sc_ch5k/utn86xpu.json', 'init=/tmp/tmp7sc_ch5k/63q4ibqn.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelt7z_x6_r/prophet_model-20230527131536.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:36 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/b8ib3d7s.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5yofo0e1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78459', 'data', 'file=/tmp/tmp7sc_ch5k/b8ib3d7s.json', 'init=/tmp/tmp7sc_ch5k/5yofo0e1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelp4631sl9/prophet_model-20230527131536.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:36 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:37 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7wmzovdd.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/h1yo_re0.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43792', 'data', 'file=/tmp/tmp7sc_ch5k/7wmzovdd.json', 'init=/tmp/tmp7sc_ch5k/h1yo_re0.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelm33ugub1/prophet_model-20230527131538.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:38 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:38 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/299q7xk9.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/_h8wf6gt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48634', 'data', 'file=/tmp/tmp7sc_ch5k/299q7xk9.json', 'init=/tmp/tmp7sc_ch5k/_h8wf6gt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelj8zuzwdo/prophet_model-20230527131539.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:39 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:39 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7akj2w4r.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/6lkeq7kd.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73426', 'data', 'file=/tmp/tmp7sc_ch5k/7akj2w4r.json', 'init=/tmp/tmp7sc_ch5k/6lkeq7kd.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model3v32efft/prophet_model-20230527131540.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:40 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:40 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/x1hx9_e6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nrd9i1ib.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63714', 'data', 'file=/tmp/tmp7sc_ch5k/x1hx9_e6.json', 'init=/tmp/tmp7sc_ch5k/nrd9i1ib.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model5pucixoy/prophet_model-20230527131541.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:41 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:41 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/59n61fm4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/brehws1m.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94680', 'data', 'file=/tmp/tmp7sc_ch5k/59n61fm4.json', 'init=/tmp/tmp7sc_ch5k/brehws1m.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelsudvum5q/prophet_model-20230527131542.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:42 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s4l1hsjz.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hoa0kz_1.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29347', 'data', 'file=/tmp/tmp7sc_ch5k/s4l1hsjz.json', 'init=/tmp/tmp7sc_ch5k/hoa0kz_1.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgb8hg84_/prophet_model-20230527131542.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:42 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:43 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/7tov8tgo.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j1_s5i7o.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82480', 'data', 'file=/tmp/tmp7sc_ch5k/7tov8tgo.json', 'init=/tmp/tmp7sc_ch5k/j1_s5i7o.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modellh97qy67/prophet_model-20230527131543.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:43 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:44 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/hebpjak_.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/oy04w88n.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54005', 'data', 'file=/tmp/tmp7sc_ch5k/hebpjak_.json', 'init=/tmp/tmp7sc_ch5k/oy04w88n.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7peve4tp/prophet_model-20230527131544.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:44 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:45 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5zg2ac1o.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r09y4inu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94383', 'data', 'file=/tmp/tmp7sc_ch5k/5zg2ac1o.json', 'init=/tmp/tmp7sc_ch5k/r09y4inu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelycregjaz/prophet_model-20230527131545.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:45 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:46 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/j11twgqm.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/33uzsl0_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37828', 'data', 'file=/tmp/tmp7sc_ch5k/j11twgqm.json', 'init=/tmp/tmp7sc_ch5k/33uzsl0_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelcwd7lnvy/prophet_model-20230527131547.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:47 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:47 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fsgvknrx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/cgl2tq_l.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13567', 'data', 'file=/tmp/tmp7sc_ch5k/fsgvknrx.json', 'init=/tmp/tmp7sc_ch5k/cgl2tq_l.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeln9hezwe_/prophet_model-20230527131548.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:48 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/km6thecc.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/fmotab9_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9098', 'data', 'file=/tmp/tmp7sc_ch5k/km6thecc.json', 'init=/tmp/tmp7sc_ch5k/fmotab9_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgilgvxn_/prophet_model-20230527131548.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:48 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:49 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/e2fpqpz6.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/qvxpus9t.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75723', 'data', 'file=/tmp/tmp7sc_ch5k/e2fpqpz6.json', 'init=/tmp/tmp7sc_ch5k/qvxpus9t.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7lk4smsf/prophet_model-20230527131550.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:50 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/zgax91n1.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/9po4iyp4.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49722', 'data', 'file=/tmp/tmp7sc_ch5k/zgax91n1.json', 'init=/tmp/tmp7sc_ch5k/9po4iyp4.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model90fwovmq/prophet_model-20230527131550.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:50 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/lze2hitx.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/rv9v8gjt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81135', 'data', 'file=/tmp/tmp7sc_ch5k/lze2hitx.json', 'init=/tmp/tmp7sc_ch5k/rv9v8gjt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltmzf5ufg/prophet_model-20230527131551.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:51 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:51 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/53n5jgoi.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5h97oa75.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28749', 'data', 'file=/tmp/tmp7sc_ch5k/53n5jgoi.json', 'init=/tmp/tmp7sc_ch5k/5h97oa75.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelq7r9dfq8/prophet_model-20230527131552.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:52 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:52 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/xjkbabow.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/86gprtsu.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47918', 'data', 'file=/tmp/tmp7sc_ch5k/xjkbabow.json', 'init=/tmp/tmp7sc_ch5k/86gprtsu.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelscu1x22r/prophet_model-20230527131553.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:53 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:53 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/jye_k7wa.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ohj6o590.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53187', 'data', 'file=/tmp/tmp7sc_ch5k/jye_k7wa.json', 'init=/tmp/tmp7sc_ch5k/ohj6o590.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelwetxw8bi/prophet_model-20230527131554.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:54 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:54 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/a4a_tg50.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/73r3hs7_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65117', 'data', 'file=/tmp/tmp7sc_ch5k/a4a_tg50.json', 'init=/tmp/tmp7sc_ch5k/73r3hs7_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model8wgd2fri/prophet_model-20230527131555.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:55 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:55 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/nilkcilk.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/u1_0qkpo.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16514', 'data', 'file=/tmp/tmp7sc_ch5k/nilkcilk.json', 'init=/tmp/tmp7sc_ch5k/u1_0qkpo.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeli7p30476/prophet_model-20230527131556.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:56 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:56 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/gya_7p2i.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/bparojic.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52322', 'data', 'file=/tmp/tmp7sc_ch5k/gya_7p2i.json', 'init=/tmp/tmp7sc_ch5k/bparojic.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeljjglww4b/prophet_model-20230527131557.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:57 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/v106xww4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/y45aysx_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84009', 'data', 'file=/tmp/tmp7sc_ch5k/v106xww4.json', 'init=/tmp/tmp7sc_ch5k/y45aysx_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelznbp0_kr/prophet_model-20230527131557.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:57 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:58 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/r2dk2cmh.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ouq11osw.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13682', 'data', 'file=/tmp/tmp7sc_ch5k/r2dk2cmh.json', 'init=/tmp/tmp7sc_ch5k/ouq11osw.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model7wzchwmu/prophet_model-20230527131559.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:15:59 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:15:59 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/ady917wn.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/se1318_6.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54267', 'data', 'file=/tmp/tmp7sc_ch5k/ady917wn.json', 'init=/tmp/tmp7sc_ch5k/se1318_6.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelaw1m7aic/prophet_model-20230527131600.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:16:00 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:16:00 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/09abkmwp.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5hvhc_ml.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89886', 'data', 'file=/tmp/tmp7sc_ch5k/09abkmwp.json', 'init=/tmp/tmp7sc_ch5k/5hvhc_ml.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelgjhr1_ks/prophet_model-20230527131601.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:16:01 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:16:01 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/oiux1b24.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/mw813u6_.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82168', 'data', 'file=/tmp/tmp7sc_ch5k/oiux1b24.json', 'init=/tmp/tmp7sc_ch5k/mw813u6_.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modelw6p2y9os/prophet_model-20230527131602.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:16:02 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:16:02 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/5g_ji3ue.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/z_3acfrp.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64203', 'data', 'file=/tmp/tmp7sc_ch5k/5g_ji3ue.json', 'init=/tmp/tmp7sc_ch5k/z_3acfrp.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_model6wdl5fk5/prophet_model-20230527131603.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:16:03 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:16:03 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n","INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/s333f61l.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp7sc_ch5k/g9i9c3rt.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.10/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50828', 'data', 'file=/tmp/tmp7sc_ch5k/s333f61l.json', 'init=/tmp/tmp7sc_ch5k/g9i9c3rt.json', 'output', 'file=/tmp/tmp7sc_ch5k/prophet_modeltpz5pnx4/prophet_model-20230527131604.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n","13:16:04 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","13:16:04 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n"]}],"source":["#group by data\n","cur_var = 0\n","\n","result_forecast = pd.DataFrame()\n","for cur_store in store_nbr:\n","\n","    #membuat filter toko/store number\n","    df_store = df1[df1['store_nbr'] == cur_store]\n","\n","    #membuat variable komputasi\n","    df_store = df_store[['date','family','sales']]\n","\n","    #merename kolom\n","    df_store.columns = ['ds','ticker','y']\n","\n","    #membuat grouping\n","    groups_by_ticker = df_store.groupby('ticker')\n","\n","    #membuat list dari ticker/family\n","    ticker_list = list(df_store['ticker'].unique())\n","\n","    #starting forecast\n","    for ticker in ticker_list:\n","\n","        group = groups_by_ticker.get_group(ticker)\n","\n","        forecast = train_and_forecast(group)\n","\n","        result_forecast = pd.concat((result_forecast, forecast))\n","\n","    cur_var += 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":559,"status":"ok","timestamp":1685196606026,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"91mNN-4lktDs","outputId":"64d9ea18-d74c-4582-a173-dc3c4eb2ba5b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             ds       ticker       yhat  yhat_lower  yhat_upper\n","0    2013-01-01  AUTOMOTIVE1   2.277817   -0.735835    5.611374\n","1    2013-01-02  AUTOMOTIVE1   1.949298   -1.160516    5.055319\n","2    2013-01-03  AUTOMOTIVE1   1.485052   -1.496552    4.871029\n","3    2013-01-04  AUTOMOTIVE1   2.227222   -0.774432    5.409197\n","4    2013-01-05  AUTOMOTIVE1   2.130809   -0.817953    5.178597\n","...         ...          ...        ...         ...         ...\n","1695 2017-08-27     SEAFOOD9  24.693717   14.766612   35.174746\n","1696 2017-08-28     SEAFOOD9  13.816385    3.521247   23.470389\n","1697 2017-08-29     SEAFOOD9  13.276576    3.101696   22.899113\n","1698 2017-08-30     SEAFOOD9  12.401588    2.735668   21.777836\n","1699 2017-08-31     SEAFOOD9  15.817701    6.209097   26.032185\n","\n","[3029400 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-8a63a17c-455c-4b13-aa85-35cdf3c14607\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>ticker</th>\n","      <th>yhat</th>\n","      <th>yhat_lower</th>\n","      <th>yhat_upper</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.277817</td>\n","      <td>-0.735835</td>\n","      <td>5.611374</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>1.949298</td>\n","      <td>-1.160516</td>\n","      <td>5.055319</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>1.485052</td>\n","      <td>-1.496552</td>\n","      <td>4.871029</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.227222</td>\n","      <td>-0.774432</td>\n","      <td>5.409197</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.130809</td>\n","      <td>-0.817953</td>\n","      <td>5.178597</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD9</td>\n","      <td>24.693717</td>\n","      <td>14.766612</td>\n","      <td>35.174746</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD9</td>\n","      <td>13.816385</td>\n","      <td>3.521247</td>\n","      <td>23.470389</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD9</td>\n","      <td>13.276576</td>\n","      <td>3.101696</td>\n","      <td>22.899113</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD9</td>\n","      <td>12.401588</td>\n","      <td>2.735668</td>\n","      <td>21.777836</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD9</td>\n","      <td>15.817701</td>\n","      <td>6.209097</td>\n","      <td>26.032185</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a63a17c-455c-4b13-aa85-35cdf3c14607')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8a63a17c-455c-4b13-aa85-35cdf3c14607 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8a63a17c-455c-4b13-aa85-35cdf3c14607');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}],"source":["result_forecast"]},{"cell_type":"markdown","source":["###**Modifikasi Hasil forecast**"],"metadata":{"id":"Wa-3KfZGge50"}},{"cell_type":"code","source":["result_forecast_mod = result_forecast.copy()"],"metadata":{"id":"-Y3jj-EwxqZq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Menambah kolom store_nbr\n","result_forecast_mod['store_nbr'] = result_forecast_mod['ticker'].str.extract('(\\d+)', expand=False)"],"metadata":{"id":"7WFbQisfoyLr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result_forecast_mod"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"FZgJXr9NHuzV","executionInfo":{"status":"ok","timestamp":1685196615872,"user_tz":-420,"elapsed":12,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"8772b41f-77e6-43bb-baa5-9c57b724c779"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             ds       ticker       yhat  yhat_lower  yhat_upper store_nbr\n","0    2013-01-01  AUTOMOTIVE1   2.277817   -0.735835    5.611374         1\n","1    2013-01-02  AUTOMOTIVE1   1.949298   -1.160516    5.055319         1\n","2    2013-01-03  AUTOMOTIVE1   1.485052   -1.496552    4.871029         1\n","3    2013-01-04  AUTOMOTIVE1   2.227222   -0.774432    5.409197         1\n","4    2013-01-05  AUTOMOTIVE1   2.130809   -0.817953    5.178597         1\n","...         ...          ...        ...         ...         ...       ...\n","1695 2017-08-27     SEAFOOD9  24.693717   14.766612   35.174746         9\n","1696 2017-08-28     SEAFOOD9  13.816385    3.521247   23.470389         9\n","1697 2017-08-29     SEAFOOD9  13.276576    3.101696   22.899113         9\n","1698 2017-08-30     SEAFOOD9  12.401588    2.735668   21.777836         9\n","1699 2017-08-31     SEAFOOD9  15.817701    6.209097   26.032185         9\n","\n","[3029400 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-67a32fa1-6f6f-4120-b27b-4b01dd7fba8d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>ticker</th>\n","      <th>yhat</th>\n","      <th>yhat_lower</th>\n","      <th>yhat_upper</th>\n","      <th>store_nbr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.277817</td>\n","      <td>-0.735835</td>\n","      <td>5.611374</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>1.949298</td>\n","      <td>-1.160516</td>\n","      <td>5.055319</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>1.485052</td>\n","      <td>-1.496552</td>\n","      <td>4.871029</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.227222</td>\n","      <td>-0.774432</td>\n","      <td>5.409197</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.130809</td>\n","      <td>-0.817953</td>\n","      <td>5.178597</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD9</td>\n","      <td>24.693717</td>\n","      <td>14.766612</td>\n","      <td>35.174746</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD9</td>\n","      <td>13.816385</td>\n","      <td>3.521247</td>\n","      <td>23.470389</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD9</td>\n","      <td>13.276576</td>\n","      <td>3.101696</td>\n","      <td>22.899113</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD9</td>\n","      <td>12.401588</td>\n","      <td>2.735668</td>\n","      <td>21.777836</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD9</td>\n","      <td>15.817701</td>\n","      <td>6.209097</td>\n","      <td>26.032185</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67a32fa1-6f6f-4120-b27b-4b01dd7fba8d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-67a32fa1-6f6f-4120-b27b-4b01dd7fba8d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-67a32fa1-6f6f-4120-b27b-4b01dd7fba8d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["forecast_new = result_forecast_mod.copy()"],"metadata":{"id":"DOdG7yUpyd0z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Menggunakan str.replace untuk menghapus angka dari setiap kolom\n","forecast_new['ticker'] = forecast_new['ticker'].replace('\\d', '', regex=True)"],"metadata":{"id":"M8_zlQFkx7YJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["forecast_new"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"8A6gs3wcyxOo","executionInfo":{"status":"ok","timestamp":1685196635822,"user_tz":-420,"elapsed":12,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"374cac05-558d-4ca7-e7a3-487201fdecf4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             ds      ticker       yhat  yhat_lower  yhat_upper store_nbr\n","0    2013-01-01  AUTOMOTIVE   2.277817   -0.735835    5.611374         1\n","1    2013-01-02  AUTOMOTIVE   1.949298   -1.160516    5.055319         1\n","2    2013-01-03  AUTOMOTIVE   1.485052   -1.496552    4.871029         1\n","3    2013-01-04  AUTOMOTIVE   2.227222   -0.774432    5.409197         1\n","4    2013-01-05  AUTOMOTIVE   2.130809   -0.817953    5.178597         1\n","...         ...         ...        ...         ...         ...       ...\n","1695 2017-08-27     SEAFOOD  24.693717   14.766612   35.174746         9\n","1696 2017-08-28     SEAFOOD  13.816385    3.521247   23.470389         9\n","1697 2017-08-29     SEAFOOD  13.276576    3.101696   22.899113         9\n","1698 2017-08-30     SEAFOOD  12.401588    2.735668   21.777836         9\n","1699 2017-08-31     SEAFOOD  15.817701    6.209097   26.032185         9\n","\n","[3029400 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-8f9b2346-5696-47d3-aed1-9db7ce4152c4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>ticker</th>\n","      <th>yhat</th>\n","      <th>yhat_lower</th>\n","      <th>yhat_upper</th>\n","      <th>store_nbr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.277817</td>\n","      <td>-0.735835</td>\n","      <td>5.611374</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1.949298</td>\n","      <td>-1.160516</td>\n","      <td>5.055319</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1.485052</td>\n","      <td>-1.496552</td>\n","      <td>4.871029</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.227222</td>\n","      <td>-0.774432</td>\n","      <td>5.409197</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.130809</td>\n","      <td>-0.817953</td>\n","      <td>5.178597</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>24.693717</td>\n","      <td>14.766612</td>\n","      <td>35.174746</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>13.816385</td>\n","      <td>3.521247</td>\n","      <td>23.470389</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>13.276576</td>\n","      <td>3.101696</td>\n","      <td>22.899113</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>12.401588</td>\n","      <td>2.735668</td>\n","      <td>21.777836</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>15.817701</td>\n","      <td>6.209097</td>\n","      <td>26.032185</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f9b2346-5696-47d3-aed1-9db7ce4152c4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8f9b2346-5696-47d3-aed1-9db7ce4152c4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8f9b2346-5696-47d3-aed1-9db7ce4152c4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["frcst = tuple(forecast_new.ticker.unique())\n","print(frcst)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BqBYrzu3H_AT","executionInfo":{"status":"ok","timestamp":1685196633827,"user_tz":-420,"elapsed":492,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"63fce51b-4c78-4af9-9965-8f0ecc93199c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('AUTOMOTIVE', 'BABY CARE', 'BEAUTY', 'BEVERAGES', 'BOOKS', 'BREAD/BAKERY', 'CELEBRATION', 'CLEANING', 'DAIRY', 'DELI', 'EGGS', 'FROZEN FOODS', 'GROCERY I', 'GROCERY II', 'HARDWARE', 'HOME AND KITCHEN I', 'HOME AND KITCHEN II', 'HOME APPLIANCES', 'HOME CARE', 'LADIESWEAR', 'LAWN AND GARDEN', 'LINGERIE', 'LIQUOR,WINE,BEER', 'MAGAZINES', 'MEATS', 'PERSONAL CARE', 'PET SUPPLIES', 'PLAYERS AND ELECTRONICS', 'POULTRY', 'PREPARED FOODS', 'PRODUCE', 'SCHOOL AND OFFICE SUPPLIES', 'SEAFOOD')\n"]}]},{"cell_type":"code","source":["forecast_new_mod = forecast_new[['ds','ticker','store_nbr','yhat']]"],"metadata":{"id":"lW7y1dNizN3l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["forecast_new_mod.columns = ['date','family','store_nbr','hasil_predict']"],"metadata":{"id":"ndme4ngz0qGM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["forecast_new_mod"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"wtKBPd_c044p","executionInfo":{"status":"ok","timestamp":1685196642818,"user_tz":-420,"elapsed":16,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"e64012f9-8750-4cf4-85ad-63c9dd5e6a97"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict\n","0    2013-01-01  AUTOMOTIVE         1       2.277817\n","1    2013-01-02  AUTOMOTIVE         1       1.949298\n","2    2013-01-03  AUTOMOTIVE         1       1.485052\n","3    2013-01-04  AUTOMOTIVE         1       2.227222\n","4    2013-01-05  AUTOMOTIVE         1       2.130809\n","...         ...         ...       ...            ...\n","1695 2017-08-27     SEAFOOD         9      24.693717\n","1696 2017-08-28     SEAFOOD         9      13.816385\n","1697 2017-08-29     SEAFOOD         9      13.276576\n","1698 2017-08-30     SEAFOOD         9      12.401588\n","1699 2017-08-31     SEAFOOD         9      15.817701\n","\n","[3029400 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-3fe7392e-d334-4a32-b888-1d77c6504b71\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.277817</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.949298</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.485052</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.227222</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.130809</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fe7392e-d334-4a32-b888-1d77c6504b71')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3fe7392e-d334-4a32-b888-1d77c6504b71 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3fe7392e-d334-4a32-b888-1d77c6504b71');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["###**Dataset Train setelah Forecast**"],"metadata":{"id":"xx8vIcxFgq5f"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1DDQ4Rm9A6AU"},"outputs":[],"source":["df_valid = forecast_new_mod[forecast_new_mod['date'] < '2017-08-16']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1685196652474,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"O5RWLqbwLgUY","outputId":"fdf32fab-c014-4abe-a895-38829c94250f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict\n","0    2013-01-01  AUTOMOTIVE         1       2.277817\n","1    2013-01-02  AUTOMOTIVE         1       1.949298\n","2    2013-01-03  AUTOMOTIVE         1       1.485052\n","3    2013-01-04  AUTOMOTIVE         1       2.227222\n","4    2013-01-05  AUTOMOTIVE         1       2.130809\n","...         ...         ...       ...            ...\n","1679 2017-08-11     SEAFOOD         9      10.611601\n","1680 2017-08-12     SEAFOOD         9      19.287960\n","1681 2017-08-13     SEAFOOD         9      24.129724\n","1682 2017-08-14     SEAFOOD         9      13.144891\n","1683 2017-08-15     SEAFOOD         9      12.499371\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-24216b16-5346-4862-831a-283caa3ece36\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.277817</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.949298</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.485052</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.227222</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.130809</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1679</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>10.611601</td>\n","    </tr>\n","    <tr>\n","      <th>1680</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>19.287960</td>\n","    </tr>\n","    <tr>\n","      <th>1681</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.129724</td>\n","    </tr>\n","    <tr>\n","      <th>1682</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.144891</td>\n","    </tr>\n","    <tr>\n","      <th>1683</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.499371</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24216b16-5346-4862-831a-283caa3ece36')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-24216b16-5346-4862-831a-283caa3ece36 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-24216b16-5346-4862-831a-283caa3ece36');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":32}],"source":["df_valid"]},{"cell_type":"markdown","source":["###**Dataset Test setelah Forecast**"],"metadata":{"id":"Zg0Nf2sYg0v0"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2Q9o1X-I4Hgu"},"outputs":[],"source":["df_forecast = forecast_new_mod[forecast_new_mod['date'] >= '2017-08-16']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1685196660775,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"szZlBy-D4LDo","outputId":"cba8d769-ccc0-4317-a369-11e1e2e55582"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict\n","1684 2017-08-16  AUTOMOTIVE         1       4.403328\n","1685 2017-08-17  AUTOMOTIVE         1       3.901121\n","1686 2017-08-18  AUTOMOTIVE         1       4.608956\n","1687 2017-08-19  AUTOMOTIVE         1       4.482122\n","1688 2017-08-20  AUTOMOTIVE         1       2.165591\n","...         ...         ...       ...            ...\n","1695 2017-08-27     SEAFOOD         9      24.693717\n","1696 2017-08-28     SEAFOOD         9      13.816385\n","1697 2017-08-29     SEAFOOD         9      13.276576\n","1698 2017-08-30     SEAFOOD         9      12.401588\n","1699 2017-08-31     SEAFOOD         9      15.817701\n","\n","[28512 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-7cffdb0a-9328-4ed0-86e1-ea36e327bfe1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1684</th>\n","      <td>2017-08-16</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.403328</td>\n","    </tr>\n","    <tr>\n","      <th>1685</th>\n","      <td>2017-08-17</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>3.901121</td>\n","    </tr>\n","    <tr>\n","      <th>1686</th>\n","      <td>2017-08-18</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.608956</td>\n","    </tr>\n","    <tr>\n","      <th>1687</th>\n","      <td>2017-08-19</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.482122</td>\n","    </tr>\n","    <tr>\n","      <th>1688</th>\n","      <td>2017-08-20</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.165591</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>28512 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7cffdb0a-9328-4ed0-86e1-ea36e327bfe1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7cffdb0a-9328-4ed0-86e1-ea36e327bfe1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7cffdb0a-9328-4ed0-86e1-ea36e327bfe1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}],"source":["df_forecast"]},{"cell_type":"markdown","source":["###**Data set Asli setelah diurutkan**"],"metadata":{"id":"vjo-ZY6GhDNO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"glrzzsbHhsdK"},"outputs":[],"source":["df_predict = df_valid.copy()\n","df_actual = df1.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":592,"status":"ok","timestamp":1685196666493,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"6CMaOemb2vz_","outputId":"718f20d9-c530-4456-8d76-d00b881aa04c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date  store_nbr                       family     sales\n","0       2013-01-01          1                  AUTOMOTIVE1     0.000\n","1       2013-01-01          1                   BABY CARE1     0.000\n","2       2013-01-01          1                      BEAUTY1     0.000\n","3       2013-01-01          1                   BEVERAGES1     0.000\n","4       2013-01-01          1                       BOOKS1     0.000\n","...            ...        ...                          ...       ...\n","3000883 2017-08-15          9                     POULTRY9   438.133\n","3000884 2017-08-15          9              PREPARED FOODS9   154.553\n","3000885 2017-08-15          9                     PRODUCE9  2419.729\n","3000886 2017-08-15          9  SCHOOL AND OFFICE SUPPLIES9   121.000\n","3000887 2017-08-15          9                     SEAFOOD9    16.000\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-21b49c82-3b8d-4472-a2a4-dcd23a3a8203\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS1</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3000883</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>POULTRY9</td>\n","      <td>438.133</td>\n","    </tr>\n","    <tr>\n","      <th>3000884</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PREPARED FOODS9</td>\n","      <td>154.553</td>\n","    </tr>\n","    <tr>\n","      <th>3000885</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>PRODUCE9</td>\n","      <td>2419.729</td>\n","    </tr>\n","    <tr>\n","      <th>3000886</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SCHOOL AND OFFICE SUPPLIES9</td>\n","      <td>121.000</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>9</td>\n","      <td>SEAFOOD9</td>\n","      <td>16.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21b49c82-3b8d-4472-a2a4-dcd23a3a8203')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21b49c82-3b8d-4472-a2a4-dcd23a3a8203 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21b49c82-3b8d-4472-a2a4-dcd23a3a8203');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":36}],"source":["df_actual"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1684938260559,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"G38puPdGS-Z5","outputId":"cd7707e5-cd09-41da-bf2c-e4073b19bcba"},"outputs":[{"data":{"text/plain":["0                          AUTOMOTIVE1\n","1                           BABY CARE1\n","2                              BEAUTY1\n","3                           BEVERAGES1\n","4                               BOOKS1\n","                      ...             \n","3000883                       POULTRY9\n","3000884                PREPARED FOODS9\n","3000885                       PRODUCE9\n","3000886    SCHOOL AND OFFICE SUPPLIES9\n","3000887                       SEAFOOD9\n","Name: family, Length: 3000888, dtype: object"]},"execution_count":56,"metadata":{},"output_type":"execute_result"}],"source":["df_actual['family']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lB3ZcYqKORt4"},"outputs":[],"source":["#group by data\n","cur_var = 0\n","\n","df_actual_result = pd.DataFrame()\n","for cur_store in store_nbr:\n","\n","    #membuat filter toko/store number\n","    df_store1 = df_actual[df_actual['store_nbr'] == cur_store]\n","\n","    #membuat variable komputasi\n","    df_store1 = df_store1[['date','family','sales']]\n","\n","    #membuat grouping\n","    groups_by_family = df_store1.groupby('family')\n","\n","    #membuat list dari ticker/family\n","    family_list = list(df_store1['family'].unique())\n","\n","    #starting forecast\n","    for family in family_list:\n","\n","        group = groups_by_family.get_group(family)\n","\n","        df_actual_result = pd.concat((df_actual_result, group))\n","\n","    cur_var += 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":845,"status":"ok","timestamp":1685197102690,"user":{"displayName":"Namira.","userId":"05868088841852811422"},"user_tz":-420},"id":"zCKuzZYXAwhk","outputId":"6cd10df1-df07-43a4-ad2d-4d937da12296"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date       family      sales\n","0       2013-01-01  AUTOMOTIVE1   0.000000\n","1782    2013-01-02  AUTOMOTIVE1   2.000000\n","3564    2013-01-03  AUTOMOTIVE1   3.000000\n","5346    2013-01-04  AUTOMOTIVE1   3.000000\n","7128    2013-01-05  AUTOMOTIVE1   5.000000\n","...            ...          ...        ...\n","2993759 2017-08-11     SEAFOOD9  23.831000\n","2995541 2017-08-12     SEAFOOD9  16.859001\n","2997323 2017-08-13     SEAFOOD9  20.000000\n","2999105 2017-08-14     SEAFOOD9  17.000000\n","3000887 2017-08-15     SEAFOOD9  16.000000\n","\n","[3000888 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-3e1e3888-0588-4ba4-871a-0e7588adb737\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1782</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3564</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5346</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>7128</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE1</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2993759</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD9</td>\n","      <td>23.831000</td>\n","    </tr>\n","    <tr>\n","      <th>2995541</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD9</td>\n","      <td>16.859001</td>\n","    </tr>\n","    <tr>\n","      <th>2997323</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD9</td>\n","      <td>20.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2999105</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD9</td>\n","      <td>17.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD9</td>\n","      <td>16.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e1e3888-0588-4ba4-871a-0e7588adb737')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3e1e3888-0588-4ba4-871a-0e7588adb737 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3e1e3888-0588-4ba4-871a-0e7588adb737');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":38}],"source":["df_actual_result"]},{"cell_type":"code","source":["df_actual_result_mod = df_actual_result.copy()"],"metadata":{"id":"yhcj9pNN2yl6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_actual_result_mod['store_nbr'] = df_actual_result_mod['family'].str.extract('(\\d+)', expand=False)"],"metadata":{"id":"AYuV4dnt2ph7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_actual_result_new = df_actual_result_mod.copy()"],"metadata":{"id":"By_kEh463HSY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_actual_result_new['family'] = df_actual_result_new['family'].replace('\\d', '', regex=True)"],"metadata":{"id":"i3xp4lxO2yHW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_actual_result_new['sales'] = df_actual_result_new['sales'].round(2)"],"metadata":{"id":"HixDNuPD3wGO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_actual_result_new"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"iX7-9Z6d3lCZ","executionInfo":{"status":"ok","timestamp":1685197130801,"user_tz":-420,"elapsed":697,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"9976aaea-49e4-4572-c55a-517ff42ba1a6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date      family  sales store_nbr\n","0       2013-01-01  AUTOMOTIVE   0.00         1\n","1782    2013-01-02  AUTOMOTIVE   2.00         1\n","3564    2013-01-03  AUTOMOTIVE   3.00         1\n","5346    2013-01-04  AUTOMOTIVE   3.00         1\n","7128    2013-01-05  AUTOMOTIVE   5.00         1\n","...            ...         ...    ...       ...\n","2993759 2017-08-11     SEAFOOD  23.83         9\n","2995541 2017-08-12     SEAFOOD  16.86         9\n","2997323 2017-08-13     SEAFOOD  20.00         9\n","2999105 2017-08-14     SEAFOOD  17.00         9\n","3000887 2017-08-15     SEAFOOD  16.00         9\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-fb56ecd1-c765-4bf6-948a-100c523a7644\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>store_nbr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1782</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3564</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5346</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7128</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>5.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2993759</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD</td>\n","      <td>23.83</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2995541</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD</td>\n","      <td>16.86</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2997323</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD</td>\n","      <td>20.00</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2999105</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD</td>\n","      <td>17.00</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD</td>\n","      <td>16.00</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb56ecd1-c765-4bf6-948a-100c523a7644')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fb56ecd1-c765-4bf6-948a-100c523a7644 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fb56ecd1-c765-4bf6-948a-100c523a7644');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"_VyfxqgUFFc3"},"source":["#**Check Error**"]},{"cell_type":"markdown","metadata":{"id":"S0IUnGzrU1QQ"},"source":["##**MAE (Mean Absolute Error)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B2fC33RvFUQ-"},"outputs":[],"source":["def mae(y_true, predictions):\n","    return np.mean(np.abs(y_true - predictions))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BKAGhMUoGQh3","executionInfo":{"status":"ok","timestamp":1685197394001,"user_tz":-420,"elapsed":10456,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"2872ccf1-f9d1-43c7-b383-9089f75ea4e7"},"outputs":[{"output_type":"stream","name":"stdout","text":["363.0805060895507\n"]}],"source":["print(mae(df_actual_result_new['sales'], df_valid['hasil_predict']))"]},{"cell_type":"markdown","metadata":{"id":"cB6inmYqU8Fs"},"source":["##**MSE (Mean Squared Error)**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o_IdiTeyVc-M","executionInfo":{"status":"ok","timestamp":1685197398241,"user_tz":-420,"elapsed":687,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"92424aea-99b3-44a0-b305-09bf9681dac6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 107945.80155978278\n"]}],"source":["from sklearn.metrics import mean_squared_error\n","\n","# Menghitung MSE menggunakan fungsi mean_squared_error dari scikit-learn\n","mse = mean_squared_error(df_actual_result_new['sales'], df_valid['hasil_predict'])\n","\n","print(\"Mean Squared Error:\", mse)"]},{"cell_type":"markdown","metadata":{"id":"1CO8E-duWQ5e"},"source":["##**RMSE (Root Mean Square Error)**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R8rq62bVWW-r","executionInfo":{"status":"ok","timestamp":1685197407957,"user_tz":-420,"elapsed":731,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"337b7e54-7fc3-40c1-c997-8e1d53e46019"},"outputs":[{"output_type":"stream","name":"stdout","text":["Root Mean Squared Error: 328.5510638542855\n"]}],"source":["# Menghitung RMSE dari MSE\n","rmse = mse ** 0.5\n","\n","print(\"Root Mean Squared Error:\", rmse)"]},{"cell_type":"markdown","metadata":{"id":"KBa9r7QTKSqL"},"source":["#**Line Chart**"]},{"cell_type":"markdown","source":["###**Plot Data Actual dengan Data Predict**"],"metadata":{"id":"bTx3C4yMiIOW"}},{"cell_type":"code","source":["df_actual_result_new"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"2xaLsIrsmTjn","executionInfo":{"status":"ok","timestamp":1685197507457,"user_tz":-420,"elapsed":744,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"770bbb90-cf99-453d-afea-ebb0e861efa8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date      family  sales store_nbr\n","0       2013-01-01  AUTOMOTIVE   0.00         1\n","1782    2013-01-02  AUTOMOTIVE   2.00         1\n","3564    2013-01-03  AUTOMOTIVE   3.00         1\n","5346    2013-01-04  AUTOMOTIVE   3.00         1\n","7128    2013-01-05  AUTOMOTIVE   5.00         1\n","...            ...         ...    ...       ...\n","2993759 2017-08-11     SEAFOOD  23.83         9\n","2995541 2017-08-12     SEAFOOD  16.86         9\n","2997323 2017-08-13     SEAFOOD  20.00         9\n","2999105 2017-08-14     SEAFOOD  17.00         9\n","3000887 2017-08-15     SEAFOOD  16.00         9\n","\n","[3000888 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-21fcc85e-cb35-4e9c-8f17-dea54ca7a072\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>store_nbr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1782</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3564</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5346</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7128</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>5.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2993759</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD</td>\n","      <td>23.83</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2995541</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD</td>\n","      <td>16.86</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2997323</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD</td>\n","      <td>20.00</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2999105</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD</td>\n","      <td>17.00</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD</td>\n","      <td>16.00</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21fcc85e-cb35-4e9c-8f17-dea54ca7a072')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21fcc85e-cb35-4e9c-8f17-dea54ca7a072 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21fcc85e-cb35-4e9c-8f17-dea54ca7a072');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["df_actual_line = df_actual_result_new.copy()"],"metadata":{"id":"HpuCz7BkmWIx"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hsYTfsrRODqt"},"outputs":[],"source":["df_actual_line['year']=df_actual_result_new['date'].dt.year\n","df_actual_line['month']=df_actual_result_new['date'].dt.month\n","df_actual_line['day']=df_actual_result_new['date'].dt.day"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"MI1f6up0OO15","executionInfo":{"status":"ok","timestamp":1685197547905,"user_tz":-420,"elapsed":20,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"bcd795fb-feb0-4865-aaf7-1d6f439da6d8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              date      family  sales store_nbr  year  month  day\n","0       2013-01-01  AUTOMOTIVE   0.00         1  2013      1    1\n","1782    2013-01-02  AUTOMOTIVE   2.00         1  2013      1    2\n","3564    2013-01-03  AUTOMOTIVE   3.00         1  2013      1    3\n","5346    2013-01-04  AUTOMOTIVE   3.00         1  2013      1    4\n","7128    2013-01-05  AUTOMOTIVE   5.00         1  2013      1    5\n","...            ...         ...    ...       ...   ...    ...  ...\n","2993759 2017-08-11     SEAFOOD  23.83         9  2017      8   11\n","2995541 2017-08-12     SEAFOOD  16.86         9  2017      8   12\n","2997323 2017-08-13     SEAFOOD  20.00         9  2017      8   13\n","2999105 2017-08-14     SEAFOOD  17.00         9  2017      8   14\n","3000887 2017-08-15     SEAFOOD  16.00         9  2017      8   15\n","\n","[3000888 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-ef4d95ae-1382-4bb5-b16c-84deadef41bc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>store_nbr</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1782</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>2.00</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3564</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>5346</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>3.00</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>7128</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>5.00</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2993759</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD</td>\n","      <td>23.83</td>\n","      <td>9</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>2995541</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD</td>\n","      <td>16.86</td>\n","      <td>9</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2997323</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD</td>\n","      <td>20.00</td>\n","      <td>9</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>2999105</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD</td>\n","      <td>17.00</td>\n","      <td>9</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3000887</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD</td>\n","      <td>16.00</td>\n","      <td>9</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef4d95ae-1382-4bb5-b16c-84deadef41bc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ef4d95ae-1382-4bb5-b16c-84deadef41bc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ef4d95ae-1382-4bb5-b16c-84deadef41bc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":54}],"source":["df_actual_line"]},{"cell_type":"code","source":["df_valid_line = df_valid.copy()"],"metadata":{"id":"WTWotmk1mhrO"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R5PfHBx2OVCq"},"outputs":[],"source":["df_valid_line['year']=df_valid['date'].dt.year\n","df_valid_line['month']=df_valid['date'].dt.month\n","df_valid_line['day']=df_valid['date'].dt.day"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"uWpEuZBhOiO3","executionInfo":{"status":"ok","timestamp":1685197651942,"user_tz":-420,"elapsed":489,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"9b099f7f-ba03-43b3-a61e-607d223f9169"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict  year  month  day\n","0    2013-01-01  AUTOMOTIVE         1       2.277817  2013      1    1\n","1    2013-01-02  AUTOMOTIVE         1       1.949298  2013      1    2\n","2    2013-01-03  AUTOMOTIVE         1       1.485052  2013      1    3\n","3    2013-01-04  AUTOMOTIVE         1       2.227222  2013      1    4\n","4    2013-01-05  AUTOMOTIVE         1       2.130809  2013      1    5\n","...         ...         ...       ...            ...   ...    ...  ...\n","1679 2017-08-11     SEAFOOD         9      10.611601  2017      8   11\n","1680 2017-08-12     SEAFOOD         9      19.287960  2017      8   12\n","1681 2017-08-13     SEAFOOD         9      24.129724  2017      8   13\n","1682 2017-08-14     SEAFOOD         9      13.144891  2017      8   14\n","1683 2017-08-15     SEAFOOD         9      12.499371  2017      8   15\n","\n","[3000888 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-66b09d40-6d01-4314-a199-af3fdeb0dbb0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.277817</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.949298</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.485052</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.227222</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.130809</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1679</th>\n","      <td>2017-08-11</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>10.611601</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>1680</th>\n","      <td>2017-08-12</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>19.287960</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1681</th>\n","      <td>2017-08-13</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.129724</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>1682</th>\n","      <td>2017-08-14</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.144891</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>1683</th>\n","      <td>2017-08-15</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.499371</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000888 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66b09d40-6d01-4314-a199-af3fdeb0dbb0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-66b09d40-6d01-4314-a199-af3fdeb0dbb0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-66b09d40-6d01-4314-a199-af3fdeb0dbb0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":59}],"source":["df_valid_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7XxTkYgLLEVs"},"outputs":[],"source":["temp3 =df_actual_line.groupby(['year', 'month'])['sales'].mean()\n","temp4 =df_valid_line.groupby(['year', 'month'])['hasil_predict'].mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"IfH4XRJoMaQD","executionInfo":{"status":"ok","timestamp":1685197701708,"user_tz":-420,"elapsed":1192,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"b03d5639-f950-4c57-f539-1e397b2d9f75"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax=plt.subplots(figsize=(11, 4))\n","temp3.plot(figsize=(15,5), fontsize=14)\n","temp4.plot(figsize=(15,5),  fontsize=14)\n","ax.legend(['real', 'predictions']);"]},{"cell_type":"markdown","source":["###**Plot Data setelah proses Forecast**"],"metadata":{"id":"8eR5oA7iiKRn"}},{"cell_type":"code","source":["df_forecast"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"jEClXZi015rp","executionInfo":{"status":"ok","timestamp":1685201598251,"user_tz":-420,"elapsed":493,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"d65eafcc-3f66-4418-f052-75fdc23b4153"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict\n","1684 2017-08-16  AUTOMOTIVE         1       4.403328\n","1685 2017-08-17  AUTOMOTIVE         1       3.901121\n","1686 2017-08-18  AUTOMOTIVE         1       4.608956\n","1687 2017-08-19  AUTOMOTIVE         1       4.482122\n","1688 2017-08-20  AUTOMOTIVE         1       2.165591\n","...         ...         ...       ...            ...\n","1695 2017-08-27     SEAFOOD         9      24.693717\n","1696 2017-08-28     SEAFOOD         9      13.816385\n","1697 2017-08-29     SEAFOOD         9      13.276576\n","1698 2017-08-30     SEAFOOD         9      12.401588\n","1699 2017-08-31     SEAFOOD         9      15.817701\n","\n","[28512 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-76d71fb3-4a13-4942-a008-7d9e11b2d193\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1684</th>\n","      <td>2017-08-16</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.403328</td>\n","    </tr>\n","    <tr>\n","      <th>1685</th>\n","      <td>2017-08-17</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>3.901121</td>\n","    </tr>\n","    <tr>\n","      <th>1686</th>\n","      <td>2017-08-18</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.608956</td>\n","    </tr>\n","    <tr>\n","      <th>1687</th>\n","      <td>2017-08-19</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.482122</td>\n","    </tr>\n","    <tr>\n","      <th>1688</th>\n","      <td>2017-08-20</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.165591</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>28512 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76d71fb3-4a13-4942-a008-7d9e11b2d193')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-76d71fb3-4a13-4942-a008-7d9e11b2d193 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-76d71fb3-4a13-4942-a008-7d9e11b2d193');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["df_forecast_line = df_forecast.copy()"],"metadata":{"id":"49ZFsg_i1_5E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_forecast_line['year']=df_forecast['date'].dt.year\n","df_forecast_line['month']=df_forecast['date'].dt.month\n","df_forecast_line['day']=df_forecast['date'].dt.day"],"metadata":{"id":"9I39vTdZ2HG8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_forecast_line"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"xtD1vGGW2QaG","executionInfo":{"status":"ok","timestamp":1685201690850,"user_tz":-420,"elapsed":489,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"21b1aa35-e895-4852-a1ec-b6fb1d39105a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict  year  month  day\n","1684 2017-08-16  AUTOMOTIVE         1       4.403328  2017      8   16\n","1685 2017-08-17  AUTOMOTIVE         1       3.901121  2017      8   17\n","1686 2017-08-18  AUTOMOTIVE         1       4.608956  2017      8   18\n","1687 2017-08-19  AUTOMOTIVE         1       4.482122  2017      8   19\n","1688 2017-08-20  AUTOMOTIVE         1       2.165591  2017      8   20\n","...         ...         ...       ...            ...   ...    ...  ...\n","1695 2017-08-27     SEAFOOD         9      24.693717  2017      8   27\n","1696 2017-08-28     SEAFOOD         9      13.816385  2017      8   28\n","1697 2017-08-29     SEAFOOD         9      13.276576  2017      8   29\n","1698 2017-08-30     SEAFOOD         9      12.401588  2017      8   30\n","1699 2017-08-31     SEAFOOD         9      15.817701  2017      8   31\n","\n","[28512 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-9ae90939-cc5b-479a-a1c3-1a0fdffd3b23\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1684</th>\n","      <td>2017-08-16</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.403328</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>1685</th>\n","      <td>2017-08-17</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>3.901121</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>1686</th>\n","      <td>2017-08-18</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.608956</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>1687</th>\n","      <td>2017-08-19</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>4.482122</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>1688</th>\n","      <td>2017-08-20</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.165591</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>31</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>28512 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ae90939-cc5b-479a-a1c3-1a0fdffd3b23')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9ae90939-cc5b-479a-a1c3-1a0fdffd3b23 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9ae90939-cc5b-479a-a1c3-1a0fdffd3b23');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["forecast_new_mod"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"6gmNh0J84hhs","executionInfo":{"status":"ok","timestamp":1685202284149,"user_tz":-420,"elapsed":598,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"f2782747-eb1a-45a0-9fc5-c3c49687322b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict\n","0    2013-01-01  AUTOMOTIVE         1       2.277817\n","1    2013-01-02  AUTOMOTIVE         1       1.949298\n","2    2013-01-03  AUTOMOTIVE         1       1.485052\n","3    2013-01-04  AUTOMOTIVE         1       2.227222\n","4    2013-01-05  AUTOMOTIVE         1       2.130809\n","...         ...         ...       ...            ...\n","1695 2017-08-27     SEAFOOD         9      24.693717\n","1696 2017-08-28     SEAFOOD         9      13.816385\n","1697 2017-08-29     SEAFOOD         9      13.276576\n","1698 2017-08-30     SEAFOOD         9      12.401588\n","1699 2017-08-31     SEAFOOD         9      15.817701\n","\n","[3029400 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-1c6c7e30-d2b9-4b1a-85a0-6821528355a5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.277817</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.949298</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.485052</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.227222</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.130809</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c6c7e30-d2b9-4b1a-85a0-6821528355a5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1c6c7e30-d2b9-4b1a-85a0-6821528355a5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1c6c7e30-d2b9-4b1a-85a0-6821528355a5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["forecast_new_line = forecast_new_mod.copy()"],"metadata":{"id":"xVbYHmHF4lT-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["forecast_new_line['year']=forecast_new_mod['date'].dt.year\n","forecast_new_line['month']=forecast_new_mod['date'].dt.month\n","forecast_new_line['day']=forecast_new_mod['date'].dt.day"],"metadata":{"id":"JtwNXSem4saA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["forecast_new_line"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"17Gkinbd4z5H","executionInfo":{"status":"ok","timestamp":1685202359057,"user_tz":-420,"elapsed":864,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"6680d6c5-3bf5-4916-d411-6621bd2b9c81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date      family store_nbr  hasil_predict  year  month  day\n","0    2013-01-01  AUTOMOTIVE         1       2.277817  2013      1    1\n","1    2013-01-02  AUTOMOTIVE         1       1.949298  2013      1    2\n","2    2013-01-03  AUTOMOTIVE         1       1.485052  2013      1    3\n","3    2013-01-04  AUTOMOTIVE         1       2.227222  2013      1    4\n","4    2013-01-05  AUTOMOTIVE         1       2.130809  2013      1    5\n","...         ...         ...       ...            ...   ...    ...  ...\n","1695 2017-08-27     SEAFOOD         9      24.693717  2017      8   27\n","1696 2017-08-28     SEAFOOD         9      13.816385  2017      8   28\n","1697 2017-08-29     SEAFOOD         9      13.276576  2017      8   29\n","1698 2017-08-30     SEAFOOD         9      12.401588  2017      8   30\n","1699 2017-08-31     SEAFOOD         9      15.817701  2017      8   31\n","\n","[3029400 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-562288a2-6ab9-443f-8a2c-271bca19c088\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>family</th>\n","      <th>store_nbr</th>\n","      <th>hasil_predict</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.277817</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.949298</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>1.485052</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.227222</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>1</td>\n","      <td>2.130809</td>\n","      <td>2013</td>\n","      <td>1</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>24.693717</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.816385</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>13.276576</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>12.401588</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>SEAFOOD</td>\n","      <td>9</td>\n","      <td>15.817701</td>\n","      <td>2017</td>\n","      <td>8</td>\n","      <td>31</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3029400 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-562288a2-6ab9-443f-8a2c-271bca19c088')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-562288a2-6ab9-443f-8a2c-271bca19c088 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-562288a2-6ab9-443f-8a2c-271bca19c088');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":72}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eIvK3L9hrH4I"},"outputs":[],"source":["temp5 =df_forecast_line.groupby(['date'])['hasil_predict'].mean()\n","temp6 =forecast_new_line.groupby(['date'])['hasil_predict'].mean().reset_index()"]},{"cell_type":"code","source":["temp6"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"CLRk2zLGBlVa","executionInfo":{"status":"ok","timestamp":1685206953352,"user_tz":-420,"elapsed":8,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"4054c1e2-37b9-4f61-8288-0665235e67da"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           date  hasil_predict\n","0    2013-01-01   3.807445e+05\n","1    2013-01-02   3.930645e+05\n","2    2013-01-03   2.937429e+05\n","3    2013-01-04   3.570311e+05\n","4    2013-01-05   5.369590e+05\n","...         ...            ...\n","1695 2017-08-27   1.077358e+06\n","1696 2017-08-28   8.727156e+05\n","1697 2017-08-29   8.301777e+05\n","1698 2017-08-30   8.583649e+05\n","1699 2017-08-31   7.745528e+05\n","\n","[1700 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-d000ff57-eb59-49ae-9c58-9dc5614fa919\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>hasil_predict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>3.807445e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>3.930645e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>2.937429e+05</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>3.570311e+05</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-05</td>\n","      <td>5.369590e+05</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>2017-08-27</td>\n","      <td>1.077358e+06</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>2017-08-28</td>\n","      <td>8.727156e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1697</th>\n","      <td>2017-08-29</td>\n","      <td>8.301777e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1698</th>\n","      <td>2017-08-30</td>\n","      <td>8.583649e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1699</th>\n","      <td>2017-08-31</td>\n","      <td>7.745528e+05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1700 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d000ff57-eb59-49ae-9c58-9dc5614fa919')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d000ff57-eb59-49ae-9c58-9dc5614fa919 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d000ff57-eb59-49ae-9c58-9dc5614fa919');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":141}]},{"cell_type":"code","source":["temp6_mod = temp6[temp6['date'] >= '2017-01-01']"],"metadata":{"id":"Si2VcTmJI1ZL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np\n","\n","dates_mod = temp6_mod['date']\n","hasil_predict_mod = temp6_mod['hasil_predict']\n","\n","reference_date = pd.to_datetime('2017-08-16')\n","\n","condition = np.where(dates_mod >= reference_date, True, False)\n","\n","# Plotting data dengan hue berdasarkan tanggal\n","plt.plot(dates_mod, np.where(condition, hasil_predict_mod, np.nan), color='red', label='After', linewidth=2)\n","plt.plot(dates_mod, np.where(~condition, hasil_predict_mod, np.nan), color='blue', label='Before', linewidth=2)\n","\n","\n","plt.xlabel('Date')\n","plt.ylabel('Hasil Pedict')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":465},"id":"eUelkxLGBRNV","executionInfo":{"status":"ok","timestamp":1685206959395,"user_tz":-420,"elapsed":825,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"6d0bd10f-37f1-4269-dfcd-02738553d543"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###**Plot Data Testing**"],"metadata":{"id":"fVginKATiSDs"}},{"cell_type":"code","source":["df_line = pd.read_csv('/content/drive/MyDrive/Start Up Campus/Final Project/test.csv')"],"metadata":{"id":"SnwJq9Eq8U81"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_line"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"x2SaxtfM8cCE","executionInfo":{"status":"ok","timestamp":1685203372030,"user_tz":-420,"elapsed":5,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"8e2b3812-083e-421a-a48d-845690874d9e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            id        date  store_nbr                      family  onpromotion\n","0      3000888  2017-08-16          1                  AUTOMOTIVE            0\n","1      3000889  2017-08-16          1                   BABY CARE            0\n","2      3000890  2017-08-16          1                      BEAUTY            2\n","3      3000891  2017-08-16          1                   BEVERAGES           20\n","4      3000892  2017-08-16          1                       BOOKS            0\n","...        ...         ...        ...                         ...          ...\n","28507  3029395  2017-08-31          9                     POULTRY            1\n","28508  3029396  2017-08-31          9              PREPARED FOODS            0\n","28509  3029397  2017-08-31          9                     PRODUCE            1\n","28510  3029398  2017-08-31          9  SCHOOL AND OFFICE SUPPLIES            9\n","28511  3029399  2017-08-31          9                     SEAFOOD            0\n","\n","[28512 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-3feec2a3-c055-49e3-a2ec-d42bf2aad8b2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3000888</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3000889</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3000890</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3000891</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3000892</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>28507</th>\n","      <td>3029395</td>\n","      <td>2017-08-31</td>\n","      <td>9</td>\n","      <td>POULTRY</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>28508</th>\n","      <td>3029396</td>\n","      <td>2017-08-31</td>\n","      <td>9</td>\n","      <td>PREPARED FOODS</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>28509</th>\n","      <td>3029397</td>\n","      <td>2017-08-31</td>\n","      <td>9</td>\n","      <td>PRODUCE</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>28510</th>\n","      <td>3029398</td>\n","      <td>2017-08-31</td>\n","      <td>9</td>\n","      <td>SCHOOL AND OFFICE SUPPLIES</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>28511</th>\n","      <td>3029399</td>\n","      <td>2017-08-31</td>\n","      <td>9</td>\n","      <td>SEAFOOD</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>28512 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3feec2a3-c055-49e3-a2ec-d42bf2aad8b2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3feec2a3-c055-49e3-a2ec-d42bf2aad8b2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3feec2a3-c055-49e3-a2ec-d42bf2aad8b2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["ig, ax=plt.subplots(figsize=(11, 4))\n","temp5.plot(figsize=(15,5), fontsize=14)\n","ax.legend(['forecast']);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":514},"id":"BDMMQVDo2ZsC","executionInfo":{"status":"ok","timestamp":1685203216837,"user_tz":-420,"elapsed":1430,"user":{"displayName":"Namira.","userId":"05868088841852811422"}},"outputId":"53d7105f-8845-42f2-c820-806b16aed341"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[{"file_id":"1A-1V9IF0_u2dnjwpZrI2PLGgQWPXTLtA","timestamp":1685484557854},{"file_id":"14j55Y-4xoR16XHX0vKl5u9hEKC58HEsG","timestamp":1683268366134}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}